using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DalDeposito
{
	/// <summary>
	/// Strongly-typed collection for the Insumo class.
	/// </summary>
    [Serializable]
	public partial class InsumoCollection : ActiveList<Insumo, InsumoCollection>
	{	   
		public InsumoCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>InsumoCollection</returns>
		public InsumoCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Insumo o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Insumos table.
	/// </summary>
	[Serializable]
	public partial class Insumo : ActiveRecord<Insumo>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Insumo()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Insumo(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Insumo(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Insumo(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Insumos", TableType.Table, DataService.GetInstance("depProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarCodigo = new TableSchema.TableColumn(schema);
				colvarCodigo.ColumnName = "Codigo";
				colvarCodigo.DataType = DbType.Int32;
				colvarCodigo.MaxLength = 0;
				colvarCodigo.AutoIncrement = false;
				colvarCodigo.IsNullable = false;
				colvarCodigo.IsPrimaryKey = true;
				colvarCodigo.IsForeignKey = false;
				colvarCodigo.IsReadOnly = false;
				colvarCodigo.DefaultSetting = @"";
				colvarCodigo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCodigo);
				
				TableSchema.TableColumn colvarSistema = new TableSchema.TableColumn(schema);
				colvarSistema.ColumnName = "Sistema";
				colvarSistema.DataType = DbType.Byte;
				colvarSistema.MaxLength = 0;
				colvarSistema.AutoIncrement = false;
				colvarSistema.IsNullable = false;
				colvarSistema.IsPrimaryKey = false;
				colvarSistema.IsForeignKey = false;
				colvarSistema.IsReadOnly = false;
				
						colvarSistema.DefaultSetting = @"((1))";
				colvarSistema.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSistema);
				
				TableSchema.TableColumn colvarRubro = new TableSchema.TableColumn(schema);
				colvarRubro.ColumnName = "Rubro";
				colvarRubro.DataType = DbType.Int32;
				colvarRubro.MaxLength = 0;
				colvarRubro.AutoIncrement = false;
				colvarRubro.IsNullable = false;
				colvarRubro.IsPrimaryKey = false;
				colvarRubro.IsForeignKey = true;
				colvarRubro.IsReadOnly = false;
				
						colvarRubro.DefaultSetting = @"((1))";
				
					colvarRubro.ForeignKeyTableName = "Insumos_Rubros";
				schema.Columns.Add(colvarRubro);
				
				TableSchema.TableColumn colvarCodigoSss = new TableSchema.TableColumn(schema);
				colvarCodigoSss.ColumnName = "Codigo_SSS";
				colvarCodigoSss.DataType = DbType.AnsiString;
				colvarCodigoSss.MaxLength = 50;
				colvarCodigoSss.AutoIncrement = false;
				colvarCodigoSss.IsNullable = true;
				colvarCodigoSss.IsPrimaryKey = false;
				colvarCodigoSss.IsForeignKey = false;
				colvarCodigoSss.IsReadOnly = false;
				colvarCodigoSss.DefaultSetting = @"";
				colvarCodigoSss.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCodigoSss);
				
				TableSchema.TableColumn colvarRubroSss = new TableSchema.TableColumn(schema);
				colvarRubroSss.ColumnName = "Rubro_SSS";
				colvarRubroSss.DataType = DbType.AnsiString;
				colvarRubroSss.MaxLength = 50;
				colvarRubroSss.AutoIncrement = false;
				colvarRubroSss.IsNullable = true;
				colvarRubroSss.IsPrimaryKey = false;
				colvarRubroSss.IsForeignKey = true;
				colvarRubroSss.IsReadOnly = false;
				colvarRubroSss.DefaultSetting = @"";
				
					colvarRubroSss.ForeignKeyTableName = "Insumos_RubrosSSS";
				schema.Columns.Add(colvarRubroSss);
				
				TableSchema.TableColumn colvarCodigoOms = new TableSchema.TableColumn(schema);
				colvarCodigoOms.ColumnName = "Codigo_OMS";
				colvarCodigoOms.DataType = DbType.AnsiString;
				colvarCodigoOms.MaxLength = 50;
				colvarCodigoOms.AutoIncrement = false;
				colvarCodigoOms.IsNullable = true;
				colvarCodigoOms.IsPrimaryKey = false;
				colvarCodigoOms.IsForeignKey = false;
				colvarCodigoOms.IsReadOnly = false;
				colvarCodigoOms.DefaultSetting = @"";
				colvarCodigoOms.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCodigoOms);
				
				TableSchema.TableColumn colvarNombre = new TableSchema.TableColumn(schema);
				colvarNombre.ColumnName = "Nombre";
				colvarNombre.DataType = DbType.AnsiString;
				colvarNombre.MaxLength = 2000;
				colvarNombre.AutoIncrement = false;
				colvarNombre.IsNullable = false;
				colvarNombre.IsPrimaryKey = false;
				colvarNombre.IsForeignKey = false;
				colvarNombre.IsReadOnly = false;
				colvarNombre.DefaultSetting = @"";
				colvarNombre.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNombre);
				
				TableSchema.TableColumn colvarDescripcion = new TableSchema.TableColumn(schema);
				colvarDescripcion.ColumnName = "Descripcion";
				colvarDescripcion.DataType = DbType.AnsiString;
				colvarDescripcion.MaxLength = 2000;
				colvarDescripcion.AutoIncrement = false;
				colvarDescripcion.IsNullable = true;
				colvarDescripcion.IsPrimaryKey = false;
				colvarDescripcion.IsForeignKey = false;
				colvarDescripcion.IsReadOnly = false;
				colvarDescripcion.DefaultSetting = @"";
				colvarDescripcion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescripcion);
				
				TableSchema.TableColumn colvarObservaciones = new TableSchema.TableColumn(schema);
				colvarObservaciones.ColumnName = "Observaciones";
				colvarObservaciones.DataType = DbType.AnsiString;
				colvarObservaciones.MaxLength = 2000;
				colvarObservaciones.AutoIncrement = false;
				colvarObservaciones.IsNullable = true;
				colvarObservaciones.IsPrimaryKey = false;
				colvarObservaciones.IsForeignKey = false;
				colvarObservaciones.IsReadOnly = false;
				colvarObservaciones.DefaultSetting = @"";
				colvarObservaciones.ForeignKeyTableName = "";
				schema.Columns.Add(colvarObservaciones);
				
				TableSchema.TableColumn colvarUnidad = new TableSchema.TableColumn(schema);
				colvarUnidad.ColumnName = "Unidad";
				colvarUnidad.DataType = DbType.AnsiString;
				colvarUnidad.MaxLength = 100;
				colvarUnidad.AutoIncrement = false;
				colvarUnidad.IsNullable = false;
				colvarUnidad.IsPrimaryKey = false;
				colvarUnidad.IsForeignKey = true;
				colvarUnidad.IsReadOnly = false;
				
						colvarUnidad.DefaultSetting = @"('Unidad')";
				
					colvarUnidad.ForeignKeyTableName = "Insumos_Unidades";
				schema.Columns.Add(colvarUnidad);
				
				TableSchema.TableColumn colvarNecesitaVencimiento = new TableSchema.TableColumn(schema);
				colvarNecesitaVencimiento.ColumnName = "Necesita_vencimiento";
				colvarNecesitaVencimiento.DataType = DbType.Boolean;
				colvarNecesitaVencimiento.MaxLength = 0;
				colvarNecesitaVencimiento.AutoIncrement = false;
				colvarNecesitaVencimiento.IsNullable = false;
				colvarNecesitaVencimiento.IsPrimaryKey = false;
				colvarNecesitaVencimiento.IsForeignKey = false;
				colvarNecesitaVencimiento.IsReadOnly = false;
				
						colvarNecesitaVencimiento.DefaultSetting = @"((1))";
				colvarNecesitaVencimiento.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNecesitaVencimiento);
				
				TableSchema.TableColumn colvarAlarmaActiva = new TableSchema.TableColumn(schema);
				colvarAlarmaActiva.ColumnName = "Alarma_Activa";
				colvarAlarmaActiva.DataType = DbType.Boolean;
				colvarAlarmaActiva.MaxLength = 0;
				colvarAlarmaActiva.AutoIncrement = false;
				colvarAlarmaActiva.IsNullable = false;
				colvarAlarmaActiva.IsPrimaryKey = false;
				colvarAlarmaActiva.IsForeignKey = false;
				colvarAlarmaActiva.IsReadOnly = false;
				
						colvarAlarmaActiva.DefaultSetting = @"((0))";
				colvarAlarmaActiva.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAlarmaActiva);
				
				TableSchema.TableColumn colvarAlarmaPrioridad = new TableSchema.TableColumn(schema);
				colvarAlarmaPrioridad.ColumnName = "Alarma_Prioridad";
				colvarAlarmaPrioridad.DataType = DbType.Byte;
				colvarAlarmaPrioridad.MaxLength = 0;
				colvarAlarmaPrioridad.AutoIncrement = false;
				colvarAlarmaPrioridad.IsNullable = false;
				colvarAlarmaPrioridad.IsPrimaryKey = false;
				colvarAlarmaPrioridad.IsForeignKey = false;
				colvarAlarmaPrioridad.IsReadOnly = false;
				
						colvarAlarmaPrioridad.DefaultSetting = @"((1))";
				colvarAlarmaPrioridad.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAlarmaPrioridad);
				
				TableSchema.TableColumn colvarAlarmaPeriodo = new TableSchema.TableColumn(schema);
				colvarAlarmaPeriodo.ColumnName = "Alarma_Periodo";
				colvarAlarmaPeriodo.DataType = DbType.Int32;
				colvarAlarmaPeriodo.MaxLength = 0;
				colvarAlarmaPeriodo.AutoIncrement = false;
				colvarAlarmaPeriodo.IsNullable = false;
				colvarAlarmaPeriodo.IsPrimaryKey = false;
				colvarAlarmaPeriodo.IsForeignKey = false;
				colvarAlarmaPeriodo.IsReadOnly = false;
				
						colvarAlarmaPeriodo.DefaultSetting = @"((52))";
				colvarAlarmaPeriodo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAlarmaPeriodo);
				
				TableSchema.TableColumn colvarAlarmaVencimiento = new TableSchema.TableColumn(schema);
				colvarAlarmaVencimiento.ColumnName = "Alarma_Vencimiento";
				colvarAlarmaVencimiento.DataType = DbType.Int32;
				colvarAlarmaVencimiento.MaxLength = 0;
				colvarAlarmaVencimiento.AutoIncrement = false;
				colvarAlarmaVencimiento.IsNullable = false;
				colvarAlarmaVencimiento.IsPrimaryKey = false;
				colvarAlarmaVencimiento.IsForeignKey = false;
				colvarAlarmaVencimiento.IsReadOnly = false;
				
						colvarAlarmaVencimiento.DefaultSetting = @"((30))";
				colvarAlarmaVencimiento.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAlarmaVencimiento);
				
				TableSchema.TableColumn colvarAlarmaCantidad = new TableSchema.TableColumn(schema);
				colvarAlarmaCantidad.ColumnName = "Alarma_Cantidad";
				colvarAlarmaCantidad.DataType = DbType.Int32;
				colvarAlarmaCantidad.MaxLength = 0;
				colvarAlarmaCantidad.AutoIncrement = false;
				colvarAlarmaCantidad.IsNullable = false;
				colvarAlarmaCantidad.IsPrimaryKey = false;
				colvarAlarmaCantidad.IsForeignKey = false;
				colvarAlarmaCantidad.IsReadOnly = false;
				
						colvarAlarmaCantidad.DefaultSetting = @"((1))";
				colvarAlarmaCantidad.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAlarmaCantidad);
				
				TableSchema.TableColumn colvarPeriodoControl = new TableSchema.TableColumn(schema);
				colvarPeriodoControl.ColumnName = "Periodo_Control";
				colvarPeriodoControl.DataType = DbType.Int32;
				colvarPeriodoControl.MaxLength = 0;
				colvarPeriodoControl.AutoIncrement = false;
				colvarPeriodoControl.IsNullable = false;
				colvarPeriodoControl.IsPrimaryKey = false;
				colvarPeriodoControl.IsForeignKey = false;
				colvarPeriodoControl.IsReadOnly = false;
				
						colvarPeriodoControl.DefaultSetting = @"((52))";
				colvarPeriodoControl.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPeriodoControl);
				
				TableSchema.TableColumn colvarActivo = new TableSchema.TableColumn(schema);
				colvarActivo.ColumnName = "Activo";
				colvarActivo.DataType = DbType.Boolean;
				colvarActivo.MaxLength = 0;
				colvarActivo.AutoIncrement = false;
				colvarActivo.IsNullable = false;
				colvarActivo.IsPrimaryKey = false;
				colvarActivo.IsForeignKey = false;
				colvarActivo.IsReadOnly = false;
				
						colvarActivo.DefaultSetting = @"((1))";
				colvarActivo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActivo);
				
				TableSchema.TableColumn colvarFarmaciaNivel = new TableSchema.TableColumn(schema);
				colvarFarmaciaNivel.ColumnName = "Farmacia_Nivel";
				colvarFarmaciaNivel.DataType = DbType.Boolean;
				colvarFarmaciaNivel.MaxLength = 0;
				colvarFarmaciaNivel.AutoIncrement = false;
				colvarFarmaciaNivel.IsNullable = true;
				colvarFarmaciaNivel.IsPrimaryKey = false;
				colvarFarmaciaNivel.IsForeignKey = false;
				colvarFarmaciaNivel.IsReadOnly = false;
				colvarFarmaciaNivel.DefaultSetting = @"";
				colvarFarmaciaNivel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFarmaciaNivel);
				
				TableSchema.TableColumn colvarFarmaciaNecesitaReceta = new TableSchema.TableColumn(schema);
				colvarFarmaciaNecesitaReceta.ColumnName = "Farmacia_NecesitaReceta";
				colvarFarmaciaNecesitaReceta.DataType = DbType.Boolean;
				colvarFarmaciaNecesitaReceta.MaxLength = 0;
				colvarFarmaciaNecesitaReceta.AutoIncrement = false;
				colvarFarmaciaNecesitaReceta.IsNullable = true;
				colvarFarmaciaNecesitaReceta.IsPrimaryKey = false;
				colvarFarmaciaNecesitaReceta.IsForeignKey = false;
				colvarFarmaciaNecesitaReceta.IsReadOnly = false;
				colvarFarmaciaNecesitaReceta.DefaultSetting = @"";
				colvarFarmaciaNecesitaReceta.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFarmaciaNecesitaReceta);
				
				TableSchema.TableColumn colvarComposicion = new TableSchema.TableColumn(schema);
				colvarComposicion.ColumnName = "Composicion";
				colvarComposicion.DataType = DbType.AnsiString;
				colvarComposicion.MaxLength = 2000;
				colvarComposicion.AutoIncrement = false;
				colvarComposicion.IsNullable = true;
				colvarComposicion.IsPrimaryKey = false;
				colvarComposicion.IsForeignKey = false;
				colvarComposicion.IsReadOnly = false;
				colvarComposicion.DefaultSetting = @"";
				colvarComposicion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComposicion);
				
				TableSchema.TableColumn colvarAccionTerapeutica = new TableSchema.TableColumn(schema);
				colvarAccionTerapeutica.ColumnName = "Accion_Terapeutica";
				colvarAccionTerapeutica.DataType = DbType.AnsiString;
				colvarAccionTerapeutica.MaxLength = 2000;
				colvarAccionTerapeutica.AutoIncrement = false;
				colvarAccionTerapeutica.IsNullable = true;
				colvarAccionTerapeutica.IsPrimaryKey = false;
				colvarAccionTerapeutica.IsForeignKey = false;
				colvarAccionTerapeutica.IsReadOnly = false;
				colvarAccionTerapeutica.DefaultSetting = @"";
				colvarAccionTerapeutica.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccionTerapeutica);
				
				TableSchema.TableColumn colvarContraindicaciones = new TableSchema.TableColumn(schema);
				colvarContraindicaciones.ColumnName = "Contraindicaciones";
				colvarContraindicaciones.DataType = DbType.AnsiString;
				colvarContraindicaciones.MaxLength = 2000;
				colvarContraindicaciones.AutoIncrement = false;
				colvarContraindicaciones.IsNullable = true;
				colvarContraindicaciones.IsPrimaryKey = false;
				colvarContraindicaciones.IsForeignKey = false;
				colvarContraindicaciones.IsReadOnly = false;
				colvarContraindicaciones.DefaultSetting = @"";
				colvarContraindicaciones.ForeignKeyTableName = "";
				schema.Columns.Add(colvarContraindicaciones);
				
				TableSchema.TableColumn colvarVerificado = new TableSchema.TableColumn(schema);
				colvarVerificado.ColumnName = "Verificado";
				colvarVerificado.DataType = DbType.Boolean;
				colvarVerificado.MaxLength = 0;
				colvarVerificado.AutoIncrement = false;
				colvarVerificado.IsNullable = false;
				colvarVerificado.IsPrimaryKey = false;
				colvarVerificado.IsForeignKey = false;
				colvarVerificado.IsReadOnly = false;
				
						colvarVerificado.DefaultSetting = @"((0))";
				colvarVerificado.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVerificado);
				
				TableSchema.TableColumn colvarUltimaModificacion = new TableSchema.TableColumn(schema);
				colvarUltimaModificacion.ColumnName = "UltimaModificacion";
				colvarUltimaModificacion.DataType = DbType.DateTime;
				colvarUltimaModificacion.MaxLength = 0;
				colvarUltimaModificacion.AutoIncrement = false;
				colvarUltimaModificacion.IsNullable = false;
				colvarUltimaModificacion.IsPrimaryKey = false;
				colvarUltimaModificacion.IsForeignKey = false;
				colvarUltimaModificacion.IsReadOnly = false;
				
						colvarUltimaModificacion.DefaultSetting = @"(getdate())";
				colvarUltimaModificacion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUltimaModificacion);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["depProvider"].AddSchema("Insumos",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Codigo")]
		[Bindable(true)]
		public int Codigo 
		{
			get { return GetColumnValue<int>(Columns.Codigo); }
			set { SetColumnValue(Columns.Codigo, value); }
		}
		  
		[XmlAttribute("Sistema")]
		[Bindable(true)]
		public byte Sistema 
		{
			get { return GetColumnValue<byte>(Columns.Sistema); }
			set { SetColumnValue(Columns.Sistema, value); }
		}
		  
		[XmlAttribute("Rubro")]
		[Bindable(true)]
		public int Rubro 
		{
			get { return GetColumnValue<int>(Columns.Rubro); }
			set { SetColumnValue(Columns.Rubro, value); }
		}
		  
		[XmlAttribute("CodigoSss")]
		[Bindable(true)]
		public string CodigoSss 
		{
			get { return GetColumnValue<string>(Columns.CodigoSss); }
			set { SetColumnValue(Columns.CodigoSss, value); }
		}
		  
		[XmlAttribute("RubroSss")]
		[Bindable(true)]
		public string RubroSss 
		{
			get { return GetColumnValue<string>(Columns.RubroSss); }
			set { SetColumnValue(Columns.RubroSss, value); }
		}
		  
		[XmlAttribute("CodigoOms")]
		[Bindable(true)]
		public string CodigoOms 
		{
			get { return GetColumnValue<string>(Columns.CodigoOms); }
			set { SetColumnValue(Columns.CodigoOms, value); }
		}
		  
		[XmlAttribute("Nombre")]
		[Bindable(true)]
		public string Nombre 
		{
			get { return GetColumnValue<string>(Columns.Nombre); }
			set { SetColumnValue(Columns.Nombre, value); }
		}
		  
		[XmlAttribute("Descripcion")]
		[Bindable(true)]
		public string Descripcion 
		{
			get { return GetColumnValue<string>(Columns.Descripcion); }
			set { SetColumnValue(Columns.Descripcion, value); }
		}
		  
		[XmlAttribute("Observaciones")]
		[Bindable(true)]
		public string Observaciones 
		{
			get { return GetColumnValue<string>(Columns.Observaciones); }
			set { SetColumnValue(Columns.Observaciones, value); }
		}
		  
		[XmlAttribute("Unidad")]
		[Bindable(true)]
		public string Unidad 
		{
			get { return GetColumnValue<string>(Columns.Unidad); }
			set { SetColumnValue(Columns.Unidad, value); }
		}
		  
		[XmlAttribute("NecesitaVencimiento")]
		[Bindable(true)]
		public bool NecesitaVencimiento 
		{
			get { return GetColumnValue<bool>(Columns.NecesitaVencimiento); }
			set { SetColumnValue(Columns.NecesitaVencimiento, value); }
		}
		  
		[XmlAttribute("AlarmaActiva")]
		[Bindable(true)]
		public bool AlarmaActiva 
		{
			get { return GetColumnValue<bool>(Columns.AlarmaActiva); }
			set { SetColumnValue(Columns.AlarmaActiva, value); }
		}
		  
		[XmlAttribute("AlarmaPrioridad")]
		[Bindable(true)]
		public byte AlarmaPrioridad 
		{
			get { return GetColumnValue<byte>(Columns.AlarmaPrioridad); }
			set { SetColumnValue(Columns.AlarmaPrioridad, value); }
		}
		  
		[XmlAttribute("AlarmaPeriodo")]
		[Bindable(true)]
		public int AlarmaPeriodo 
		{
			get { return GetColumnValue<int>(Columns.AlarmaPeriodo); }
			set { SetColumnValue(Columns.AlarmaPeriodo, value); }
		}
		  
		[XmlAttribute("AlarmaVencimiento")]
		[Bindable(true)]
		public int AlarmaVencimiento 
		{
			get { return GetColumnValue<int>(Columns.AlarmaVencimiento); }
			set { SetColumnValue(Columns.AlarmaVencimiento, value); }
		}
		  
		[XmlAttribute("AlarmaCantidad")]
		[Bindable(true)]
		public int AlarmaCantidad 
		{
			get { return GetColumnValue<int>(Columns.AlarmaCantidad); }
			set { SetColumnValue(Columns.AlarmaCantidad, value); }
		}
		  
		[XmlAttribute("PeriodoControl")]
		[Bindable(true)]
		public int PeriodoControl 
		{
			get { return GetColumnValue<int>(Columns.PeriodoControl); }
			set { SetColumnValue(Columns.PeriodoControl, value); }
		}
		  
		[XmlAttribute("Activo")]
		[Bindable(true)]
		public bool Activo 
		{
			get { return GetColumnValue<bool>(Columns.Activo); }
			set { SetColumnValue(Columns.Activo, value); }
		}
		  
		[XmlAttribute("FarmaciaNivel")]
		[Bindable(true)]
		public bool? FarmaciaNivel 
		{
			get { return GetColumnValue<bool?>(Columns.FarmaciaNivel); }
			set { SetColumnValue(Columns.FarmaciaNivel, value); }
		}
		  
		[XmlAttribute("FarmaciaNecesitaReceta")]
		[Bindable(true)]
		public bool? FarmaciaNecesitaReceta 
		{
			get { return GetColumnValue<bool?>(Columns.FarmaciaNecesitaReceta); }
			set { SetColumnValue(Columns.FarmaciaNecesitaReceta, value); }
		}
		  
		[XmlAttribute("Composicion")]
		[Bindable(true)]
		public string Composicion 
		{
			get { return GetColumnValue<string>(Columns.Composicion); }
			set { SetColumnValue(Columns.Composicion, value); }
		}
		  
		[XmlAttribute("AccionTerapeutica")]
		[Bindable(true)]
		public string AccionTerapeutica 
		{
			get { return GetColumnValue<string>(Columns.AccionTerapeutica); }
			set { SetColumnValue(Columns.AccionTerapeutica, value); }
		}
		  
		[XmlAttribute("Contraindicaciones")]
		[Bindable(true)]
		public string Contraindicaciones 
		{
			get { return GetColumnValue<string>(Columns.Contraindicaciones); }
			set { SetColumnValue(Columns.Contraindicaciones, value); }
		}
		  
		[XmlAttribute("Verificado")]
		[Bindable(true)]
		public bool Verificado 
		{
			get { return GetColumnValue<bool>(Columns.Verificado); }
			set { SetColumnValue(Columns.Verificado, value); }
		}
		  
		[XmlAttribute("UltimaModificacion")]
		[Bindable(true)]
		public DateTime UltimaModificacion 
		{
			get { return GetColumnValue<DateTime>(Columns.UltimaModificacion); }
			set { SetColumnValue(Columns.UltimaModificacion, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
				
		private DalDeposito.InsumosDescargasLineaCollection colInsumosDescargasLineas;
		public DalDeposito.InsumosDescargasLineaCollection InsumosDescargasLineas
		{
			get
			{
				if(colInsumosDescargasLineas == null)
				{
					colInsumosDescargasLineas = new DalDeposito.InsumosDescargasLineaCollection().Where(InsumosDescargasLinea.Columns.Insumo, Codigo).Load();
					colInsumosDescargasLineas.ListChanged += new ListChangedEventHandler(colInsumosDescargasLineas_ListChanged);
				}
				return colInsumosDescargasLineas;			
			}
			set 
			{ 
					colInsumosDescargasLineas = value; 
					colInsumosDescargasLineas.ListChanged += new ListChangedEventHandler(colInsumosDescargasLineas_ListChanged);
			}
		}
		
		void colInsumosDescargasLineas_ListChanged(object sender, ListChangedEventArgs e)
		{
		    if (e.ListChangedType == ListChangedType.ItemAdded)
		    {
		        // Set foreign key value
		        colInsumosDescargasLineas[e.NewIndex].Insumo = Codigo;
		    }
		}
				
		private DalDeposito.InsumosConsumoAnualCollection colInsumosConsumoAnualRecords;
		public DalDeposito.InsumosConsumoAnualCollection InsumosConsumoAnualRecords
		{
			get
			{
				if(colInsumosConsumoAnualRecords == null)
				{
					colInsumosConsumoAnualRecords = new DalDeposito.InsumosConsumoAnualCollection().Where(InsumosConsumoAnual.Columns.Insumo, Codigo).Load();
					colInsumosConsumoAnualRecords.ListChanged += new ListChangedEventHandler(colInsumosConsumoAnualRecords_ListChanged);
				}
				return colInsumosConsumoAnualRecords;			
			}
			set 
			{ 
					colInsumosConsumoAnualRecords = value; 
					colInsumosConsumoAnualRecords.ListChanged += new ListChangedEventHandler(colInsumosConsumoAnualRecords_ListChanged);
			}
		}
		
		void colInsumosConsumoAnualRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
		    if (e.ListChangedType == ListChangedType.ItemAdded)
		    {
		        // Set foreign key value
		        colInsumosConsumoAnualRecords[e.NewIndex].Insumo = Codigo;
		    }
		}
				
		private DalDeposito.InsumosLlegadaCollection colInsumosLlegadaRecords;
		public DalDeposito.InsumosLlegadaCollection InsumosLlegadaRecords
		{
			get
			{
				if(colInsumosLlegadaRecords == null)
				{
					colInsumosLlegadaRecords = new DalDeposito.InsumosLlegadaCollection().Where(InsumosLlegada.Columns.Insumo, Codigo).Load();
					colInsumosLlegadaRecords.ListChanged += new ListChangedEventHandler(colInsumosLlegadaRecords_ListChanged);
				}
				return colInsumosLlegadaRecords;			
			}
			set 
			{ 
					colInsumosLlegadaRecords = value; 
					colInsumosLlegadaRecords.ListChanged += new ListChangedEventHandler(colInsumosLlegadaRecords_ListChanged);
			}
		}
		
		void colInsumosLlegadaRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
		    if (e.ListChangedType == ListChangedType.ItemAdded)
		    {
		        // Set foreign key value
		        colInsumosLlegadaRecords[e.NewIndex].Insumo = Codigo;
		    }
		}
				
		private DalDeposito.InsumosPedidosLineaCollection colInsumosPedidosLineas;
		public DalDeposito.InsumosPedidosLineaCollection InsumosPedidosLineas
		{
			get
			{
				if(colInsumosPedidosLineas == null)
				{
					colInsumosPedidosLineas = new DalDeposito.InsumosPedidosLineaCollection().Where(InsumosPedidosLinea.Columns.Insumo, Codigo).Load();
					colInsumosPedidosLineas.ListChanged += new ListChangedEventHandler(colInsumosPedidosLineas_ListChanged);
				}
				return colInsumosPedidosLineas;			
			}
			set 
			{ 
					colInsumosPedidosLineas = value; 
					colInsumosPedidosLineas.ListChanged += new ListChangedEventHandler(colInsumosPedidosLineas_ListChanged);
			}
		}
		
		void colInsumosPedidosLineas_ListChanged(object sender, ListChangedEventArgs e)
		{
		    if (e.ListChangedType == ListChangedType.ItemAdded)
		    {
		        // Set foreign key value
		        colInsumosPedidosLineas[e.NewIndex].Insumo = Codigo;
		    }
		}
				
		private DalDeposito.InsumosPedidosLineaCollection colInsumosPedidosLineasFromInsumo;
		public DalDeposito.InsumosPedidosLineaCollection InsumosPedidosLineasFromInsumo
		{
			get
			{
				if(colInsumosPedidosLineasFromInsumo == null)
				{
					colInsumosPedidosLineasFromInsumo = new DalDeposito.InsumosPedidosLineaCollection().Where(InsumosPedidosLinea.Columns.InsumoReemplazo, Codigo).Load();
					colInsumosPedidosLineasFromInsumo.ListChanged += new ListChangedEventHandler(colInsumosPedidosLineasFromInsumo_ListChanged);
				}
				return colInsumosPedidosLineasFromInsumo;			
			}
			set 
			{ 
					colInsumosPedidosLineasFromInsumo = value; 
					colInsumosPedidosLineasFromInsumo.ListChanged += new ListChangedEventHandler(colInsumosPedidosLineasFromInsumo_ListChanged);
			}
		}
		
		void colInsumosPedidosLineasFromInsumo_ListChanged(object sender, ListChangedEventArgs e)
		{
		    if (e.ListChangedType == ListChangedType.ItemAdded)
		    {
		        // Set foreign key value
		        colInsumosPedidosLineasFromInsumo[e.NewIndex].InsumoReemplazo = Codigo;
		    }
		}
				
		private DalDeposito.InsumosPorProveedorCollection colInsumosPorProveedorRecords;
		public DalDeposito.InsumosPorProveedorCollection InsumosPorProveedorRecords
		{
			get
			{
				if(colInsumosPorProveedorRecords == null)
				{
					colInsumosPorProveedorRecords = new DalDeposito.InsumosPorProveedorCollection().Where(InsumosPorProveedor.Columns.Insumo, Codigo).Load();
					colInsumosPorProveedorRecords.ListChanged += new ListChangedEventHandler(colInsumosPorProveedorRecords_ListChanged);
				}
				return colInsumosPorProveedorRecords;			
			}
			set 
			{ 
					colInsumosPorProveedorRecords = value; 
					colInsumosPorProveedorRecords.ListChanged += new ListChangedEventHandler(colInsumosPorProveedorRecords_ListChanged);
			}
		}
		
		void colInsumosPorProveedorRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
		    if (e.ListChangedType == ListChangedType.ItemAdded)
		    {
		        // Set foreign key value
		        colInsumosPorProveedorRecords[e.NewIndex].Insumo = Codigo;
		    }
		}
				
		private DalDeposito.InsumosProvisionesLineaCollection colInsumosProvisionesLineas;
		public DalDeposito.InsumosProvisionesLineaCollection InsumosProvisionesLineas
		{
			get
			{
				if(colInsumosProvisionesLineas == null)
				{
					colInsumosProvisionesLineas = new DalDeposito.InsumosProvisionesLineaCollection().Where(InsumosProvisionesLinea.Columns.Insumo, Codigo).Load();
					colInsumosProvisionesLineas.ListChanged += new ListChangedEventHandler(colInsumosProvisionesLineas_ListChanged);
				}
				return colInsumosProvisionesLineas;			
			}
			set 
			{ 
					colInsumosProvisionesLineas = value; 
					colInsumosProvisionesLineas.ListChanged += new ListChangedEventHandler(colInsumosProvisionesLineas_ListChanged);
			}
		}
		
		void colInsumosProvisionesLineas_ListChanged(object sender, ListChangedEventArgs e)
		{
		    if (e.ListChangedType == ListChangedType.ItemAdded)
		    {
		        // Set foreign key value
		        colInsumosProvisionesLineas[e.NewIndex].Insumo = Codigo;
		    }
		}
				
		private DalDeposito.InsumosReemplazoCollection colInsumosReemplazos;
		public DalDeposito.InsumosReemplazoCollection InsumosReemplazos
		{
			get
			{
				if(colInsumosReemplazos == null)
				{
					colInsumosReemplazos = new DalDeposito.InsumosReemplazoCollection().Where(InsumosReemplazo.Columns.Insumo, Codigo).Load();
					colInsumosReemplazos.ListChanged += new ListChangedEventHandler(colInsumosReemplazos_ListChanged);
				}
				return colInsumosReemplazos;			
			}
			set 
			{ 
					colInsumosReemplazos = value; 
					colInsumosReemplazos.ListChanged += new ListChangedEventHandler(colInsumosReemplazos_ListChanged);
			}
		}
		
		void colInsumosReemplazos_ListChanged(object sender, ListChangedEventArgs e)
		{
		    if (e.ListChangedType == ListChangedType.ItemAdded)
		    {
		        // Set foreign key value
		        colInsumosReemplazos[e.NewIndex].Insumo = Codigo;
		    }
		}
				
		private DalDeposito.InsumosReemplazoCollection colInsumosReemplazosFromInsumo;
		public DalDeposito.InsumosReemplazoCollection InsumosReemplazosFromInsumo
		{
			get
			{
				if(colInsumosReemplazosFromInsumo == null)
				{
					colInsumosReemplazosFromInsumo = new DalDeposito.InsumosReemplazoCollection().Where(InsumosReemplazo.Columns.InsumoReemplazo, Codigo).Load();
					colInsumosReemplazosFromInsumo.ListChanged += new ListChangedEventHandler(colInsumosReemplazosFromInsumo_ListChanged);
				}
				return colInsumosReemplazosFromInsumo;			
			}
			set 
			{ 
					colInsumosReemplazosFromInsumo = value; 
					colInsumosReemplazosFromInsumo.ListChanged += new ListChangedEventHandler(colInsumosReemplazosFromInsumo_ListChanged);
			}
		}
		
		void colInsumosReemplazosFromInsumo_ListChanged(object sender, ListChangedEventArgs e)
		{
		    if (e.ListChangedType == ListChangedType.ItemAdded)
		    {
		        // Set foreign key value
		        colInsumosReemplazosFromInsumo[e.NewIndex].InsumoReemplazo = Codigo;
		    }
		}
				
		private DalDeposito.InsumosPermitidoCollection colInsumosPermitidos;
		public DalDeposito.InsumosPermitidoCollection InsumosPermitidos
		{
			get
			{
				if(colInsumosPermitidos == null)
				{
					colInsumosPermitidos = new DalDeposito.InsumosPermitidoCollection().Where(InsumosPermitido.Columns.Insumo, Codigo).Load();
					colInsumosPermitidos.ListChanged += new ListChangedEventHandler(colInsumosPermitidos_ListChanged);
				}
				return colInsumosPermitidos;			
			}
			set 
			{ 
					colInsumosPermitidos = value; 
					colInsumosPermitidos.ListChanged += new ListChangedEventHandler(colInsumosPermitidos_ListChanged);
			}
		}
		
		void colInsumosPermitidos_ListChanged(object sender, ListChangedEventArgs e)
		{
		    if (e.ListChangedType == ListChangedType.ItemAdded)
		    {
		        // Set foreign key value
		        colInsumosPermitidos[e.NewIndex].Insumo = Codigo;
		    }
		}
				
		private DalDeposito.InsumosSolicitudesLineaCollection colInsumosSolicitudesLineas;
		public DalDeposito.InsumosSolicitudesLineaCollection InsumosSolicitudesLineas
		{
			get
			{
				if(colInsumosSolicitudesLineas == null)
				{
					colInsumosSolicitudesLineas = new DalDeposito.InsumosSolicitudesLineaCollection().Where(InsumosSolicitudesLinea.Columns.Insumo, Codigo).Load();
					colInsumosSolicitudesLineas.ListChanged += new ListChangedEventHandler(colInsumosSolicitudesLineas_ListChanged);
				}
				return colInsumosSolicitudesLineas;			
			}
			set 
			{ 
					colInsumosSolicitudesLineas = value; 
					colInsumosSolicitudesLineas.ListChanged += new ListChangedEventHandler(colInsumosSolicitudesLineas_ListChanged);
			}
		}
		
		void colInsumosSolicitudesLineas_ListChanged(object sender, ListChangedEventArgs e)
		{
		    if (e.ListChangedType == ListChangedType.ItemAdded)
		    {
		        // Set foreign key value
		        colInsumosSolicitudesLineas[e.NewIndex].Insumo = Codigo;
		    }
		}
				
		private DalDeposito.InsumosTemporalImpresionCollection colInsumosTemporalImpresionRecords;
		public DalDeposito.InsumosTemporalImpresionCollection InsumosTemporalImpresionRecords
		{
			get
			{
				if(colInsumosTemporalImpresionRecords == null)
				{
					colInsumosTemporalImpresionRecords = new DalDeposito.InsumosTemporalImpresionCollection().Where(InsumosTemporalImpresion.Columns.IdInsumo, Codigo).Load();
					colInsumosTemporalImpresionRecords.ListChanged += new ListChangedEventHandler(colInsumosTemporalImpresionRecords_ListChanged);
				}
				return colInsumosTemporalImpresionRecords;			
			}
			set 
			{ 
					colInsumosTemporalImpresionRecords = value; 
					colInsumosTemporalImpresionRecords.ListChanged += new ListChangedEventHandler(colInsumosTemporalImpresionRecords_ListChanged);
			}
		}
		
		void colInsumosTemporalImpresionRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
		    if (e.ListChangedType == ListChangedType.ItemAdded)
		    {
		        // Set foreign key value
		        colInsumosTemporalImpresionRecords[e.NewIndex].IdInsumo = Codigo;
		    }
		}
		
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a InsumosRubro ActiveRecord object related to this Insumo
		/// 
		/// </summary>
		public DalDeposito.InsumosRubro InsumosRubro
		{
			get { return DalDeposito.InsumosRubro.FetchByID(this.Rubro); }
			set { SetColumnValue("Rubro", value.Codigo); }
		}
		
		
		/// <summary>
		/// Returns a InsumosRubrosSss ActiveRecord object related to this Insumo
		/// 
		/// </summary>
		public DalDeposito.InsumosRubrosSss InsumosRubrosSss
		{
			get { return DalDeposito.InsumosRubrosSss.FetchByID(this.RubroSss); }
			set { SetColumnValue("Rubro_SSS", value.Nombre); }
		}
		
		
		/// <summary>
		/// Returns a InsumosUnidade ActiveRecord object related to this Insumo
		/// 
		/// </summary>
		public DalDeposito.InsumosUnidade InsumosUnidade
		{
			get { return DalDeposito.InsumosUnidade.FetchByID(this.Unidad); }
			set { SetColumnValue("Unidad", value.Unidad); }
		}
		
		
		#endregion
		
		
		
		#region Many To Many Helpers
		
		 
		public DalDeposito.InsumosProvisionesAgenteCollection GetInsumosProvisionesAgenteCollection() { return Insumo.GetInsumosProvisionesAgenteCollection(this.Codigo); }
		public static DalDeposito.InsumosProvisionesAgenteCollection GetInsumosProvisionesAgenteCollection(int varCodigo)
		{
		    SubSonic.QueryCommand cmd = new SubSonic.QueryCommand("SELECT * FROM [dbo].[Insumos_Provisiones_Agentes] INNER JOIN [Insumos_Por_Proveedor] ON [Insumos_Provisiones_Agentes].[Codigo] = [Insumos_Por_Proveedor].[Proveedor] WHERE [Insumos_Por_Proveedor].[Insumo] = @Insumo", Insumo.Schema.Provider.Name);
			cmd.AddParameter("@Insumo", varCodigo, DbType.Int32);
			IDataReader rdr = SubSonic.DataService.GetReader(cmd);
			InsumosProvisionesAgenteCollection coll = new InsumosProvisionesAgenteCollection();
			coll.LoadAndCloseReader(rdr);
			return coll;
		}
		
		public static void SaveInsumosProvisionesAgenteMap(int varCodigo, InsumosProvisionesAgenteCollection items)
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [Insumos_Por_Proveedor] WHERE [Insumos_Por_Proveedor].[Insumo] = @Insumo", Insumo.Schema.Provider.Name);
			cmdDel.AddParameter("@Insumo", varCodigo, DbType.Int32);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (InsumosProvisionesAgente item in items)
			{
				InsumosPorProveedor varInsumosPorProveedor = new InsumosPorProveedor();
				varInsumosPorProveedor.SetColumnValue("Insumo", varCodigo);
				varInsumosPorProveedor.SetColumnValue("Proveedor", item.GetPrimaryKeyValue());
				varInsumosPorProveedor.Save();
			}
		}
		public static void SaveInsumosProvisionesAgenteMap(int varCodigo, System.Web.UI.WebControls.ListItemCollection itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [Insumos_Por_Proveedor] WHERE [Insumos_Por_Proveedor].[Insumo] = @Insumo", Insumo.Schema.Provider.Name);
			cmdDel.AddParameter("@Insumo", varCodigo, DbType.Int32);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (System.Web.UI.WebControls.ListItem l in itemList) 
			{
				if (l.Selected) 
				{
					InsumosPorProveedor varInsumosPorProveedor = new InsumosPorProveedor();
					varInsumosPorProveedor.SetColumnValue("Insumo", varCodigo);
					varInsumosPorProveedor.SetColumnValue("Proveedor", l.Value);
					varInsumosPorProveedor.Save();
				}
			}
		}
		public static void SaveInsumosProvisionesAgenteMap(int varCodigo , int[] itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [Insumos_Por_Proveedor] WHERE [Insumos_Por_Proveedor].[Insumo] = @Insumo", Insumo.Schema.Provider.Name);
			cmdDel.AddParameter("@Insumo", varCodigo, DbType.Int32);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (int item in itemList) 
			{
				InsumosPorProveedor varInsumosPorProveedor = new InsumosPorProveedor();
				varInsumosPorProveedor.SetColumnValue("Insumo", varCodigo);
				varInsumosPorProveedor.SetColumnValue("Proveedor", item);
				varInsumosPorProveedor.Save();
			}
		}
		
		public static void DeleteInsumosProvisionesAgenteMap(int varCodigo) 
		{
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [Insumos_Por_Proveedor] WHERE [Insumos_Por_Proveedor].[Insumo] = @Insumo", Insumo.Schema.Provider.Name);
			cmdDel.AddParameter("@Insumo", varCodigo, DbType.Int32);
			DataService.ExecuteQuery(cmdDel);
		}
		
		#endregion
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varCodigo,byte varSistema,int varRubro,string varCodigoSss,string varRubroSss,string varCodigoOms,string varNombre,string varDescripcion,string varObservaciones,string varUnidad,bool varNecesitaVencimiento,bool varAlarmaActiva,byte varAlarmaPrioridad,int varAlarmaPeriodo,int varAlarmaVencimiento,int varAlarmaCantidad,int varPeriodoControl,bool varActivo,bool? varFarmaciaNivel,bool? varFarmaciaNecesitaReceta,string varComposicion,string varAccionTerapeutica,string varContraindicaciones,bool varVerificado,DateTime varUltimaModificacion)
		{
			Insumo item = new Insumo();
			
			item.Codigo = varCodigo;
			
			item.Sistema = varSistema;
			
			item.Rubro = varRubro;
			
			item.CodigoSss = varCodigoSss;
			
			item.RubroSss = varRubroSss;
			
			item.CodigoOms = varCodigoOms;
			
			item.Nombre = varNombre;
			
			item.Descripcion = varDescripcion;
			
			item.Observaciones = varObservaciones;
			
			item.Unidad = varUnidad;
			
			item.NecesitaVencimiento = varNecesitaVencimiento;
			
			item.AlarmaActiva = varAlarmaActiva;
			
			item.AlarmaPrioridad = varAlarmaPrioridad;
			
			item.AlarmaPeriodo = varAlarmaPeriodo;
			
			item.AlarmaVencimiento = varAlarmaVencimiento;
			
			item.AlarmaCantidad = varAlarmaCantidad;
			
			item.PeriodoControl = varPeriodoControl;
			
			item.Activo = varActivo;
			
			item.FarmaciaNivel = varFarmaciaNivel;
			
			item.FarmaciaNecesitaReceta = varFarmaciaNecesitaReceta;
			
			item.Composicion = varComposicion;
			
			item.AccionTerapeutica = varAccionTerapeutica;
			
			item.Contraindicaciones = varContraindicaciones;
			
			item.Verificado = varVerificado;
			
			item.UltimaModificacion = varUltimaModificacion;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varCodigo,byte varSistema,int varRubro,string varCodigoSss,string varRubroSss,string varCodigoOms,string varNombre,string varDescripcion,string varObservaciones,string varUnidad,bool varNecesitaVencimiento,bool varAlarmaActiva,byte varAlarmaPrioridad,int varAlarmaPeriodo,int varAlarmaVencimiento,int varAlarmaCantidad,int varPeriodoControl,bool varActivo,bool? varFarmaciaNivel,bool? varFarmaciaNecesitaReceta,string varComposicion,string varAccionTerapeutica,string varContraindicaciones,bool varVerificado,DateTime varUltimaModificacion)
		{
			Insumo item = new Insumo();
			
				item.Codigo = varCodigo;
			
				item.Sistema = varSistema;
			
				item.Rubro = varRubro;
			
				item.CodigoSss = varCodigoSss;
			
				item.RubroSss = varRubroSss;
			
				item.CodigoOms = varCodigoOms;
			
				item.Nombre = varNombre;
			
				item.Descripcion = varDescripcion;
			
				item.Observaciones = varObservaciones;
			
				item.Unidad = varUnidad;
			
				item.NecesitaVencimiento = varNecesitaVencimiento;
			
				item.AlarmaActiva = varAlarmaActiva;
			
				item.AlarmaPrioridad = varAlarmaPrioridad;
			
				item.AlarmaPeriodo = varAlarmaPeriodo;
			
				item.AlarmaVencimiento = varAlarmaVencimiento;
			
				item.AlarmaCantidad = varAlarmaCantidad;
			
				item.PeriodoControl = varPeriodoControl;
			
				item.Activo = varActivo;
			
				item.FarmaciaNivel = varFarmaciaNivel;
			
				item.FarmaciaNecesitaReceta = varFarmaciaNecesitaReceta;
			
				item.Composicion = varComposicion;
			
				item.AccionTerapeutica = varAccionTerapeutica;
			
				item.Contraindicaciones = varContraindicaciones;
			
				item.Verificado = varVerificado;
			
				item.UltimaModificacion = varUltimaModificacion;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn CodigoColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SistemaColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn RubroColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CodigoSssColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn RubroSssColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CodigoOmsColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn NombreColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DescripcionColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ObservacionesColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn UnidadColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn NecesitaVencimientoColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn AlarmaActivaColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn AlarmaPrioridadColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn AlarmaPeriodoColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn AlarmaVencimientoColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn AlarmaCantidadColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn PeriodoControlColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn ActivoColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn FarmaciaNivelColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn FarmaciaNecesitaRecetaColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn ComposicionColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn AccionTerapeuticaColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn ContraindicacionesColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn VerificadoColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn UltimaModificacionColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Codigo = @"Codigo";
			 public static string Sistema = @"Sistema";
			 public static string Rubro = @"Rubro";
			 public static string CodigoSss = @"Codigo_SSS";
			 public static string RubroSss = @"Rubro_SSS";
			 public static string CodigoOms = @"Codigo_OMS";
			 public static string Nombre = @"Nombre";
			 public static string Descripcion = @"Descripcion";
			 public static string Observaciones = @"Observaciones";
			 public static string Unidad = @"Unidad";
			 public static string NecesitaVencimiento = @"Necesita_vencimiento";
			 public static string AlarmaActiva = @"Alarma_Activa";
			 public static string AlarmaPrioridad = @"Alarma_Prioridad";
			 public static string AlarmaPeriodo = @"Alarma_Periodo";
			 public static string AlarmaVencimiento = @"Alarma_Vencimiento";
			 public static string AlarmaCantidad = @"Alarma_Cantidad";
			 public static string PeriodoControl = @"Periodo_Control";
			 public static string Activo = @"Activo";
			 public static string FarmaciaNivel = @"Farmacia_Nivel";
			 public static string FarmaciaNecesitaReceta = @"Farmacia_NecesitaReceta";
			 public static string Composicion = @"Composicion";
			 public static string AccionTerapeutica = @"Accion_Terapeutica";
			 public static string Contraindicaciones = @"Contraindicaciones";
			 public static string Verificado = @"Verificado";
			 public static string UltimaModificacion = @"UltimaModificacion";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
                if (colInsumosDescargasLineas != null)
                {
                    foreach (DalDeposito.InsumosDescargasLinea item in colInsumosDescargasLineas)
                    {
                        if (item.Insumo != Codigo)
                        {
                            item.Insumo = Codigo;
                        }
                    }
               }
		
                if (colInsumosConsumoAnualRecords != null)
                {
                    foreach (DalDeposito.InsumosConsumoAnual item in colInsumosConsumoAnualRecords)
                    {
                        if (item.Insumo != Codigo)
                        {
                            item.Insumo = Codigo;
                        }
                    }
               }
		
                if (colInsumosLlegadaRecords != null)
                {
                    foreach (DalDeposito.InsumosLlegada item in colInsumosLlegadaRecords)
                    {
                        if (item.Insumo != Codigo)
                        {
                            item.Insumo = Codigo;
                        }
                    }
               }
		
                if (colInsumosPedidosLineas != null)
                {
                    foreach (DalDeposito.InsumosPedidosLinea item in colInsumosPedidosLineas)
                    {
                        if (item.Insumo != Codigo)
                        {
                            item.Insumo = Codigo;
                        }
                    }
               }
		
                if (colInsumosPedidosLineasFromInsumo != null)
                {
                    foreach (DalDeposito.InsumosPedidosLinea item in colInsumosPedidosLineasFromInsumo)
                    {
                        if (item.InsumoReemplazo == null ||item.InsumoReemplazo != Codigo)
                        {
                            item.InsumoReemplazo = Codigo;
                        }
                    }
               }
		
                if (colInsumosPorProveedorRecords != null)
                {
                    foreach (DalDeposito.InsumosPorProveedor item in colInsumosPorProveedorRecords)
                    {
                        if (item.Insumo != Codigo)
                        {
                            item.Insumo = Codigo;
                        }
                    }
               }
		
                if (colInsumosProvisionesLineas != null)
                {
                    foreach (DalDeposito.InsumosProvisionesLinea item in colInsumosProvisionesLineas)
                    {
                        if (item.Insumo != Codigo)
                        {
                            item.Insumo = Codigo;
                        }
                    }
               }
		
                if (colInsumosReemplazos != null)
                {
                    foreach (DalDeposito.InsumosReemplazo item in colInsumosReemplazos)
                    {
                        if (item.Insumo != Codigo)
                        {
                            item.Insumo = Codigo;
                        }
                    }
               }
		
                if (colInsumosReemplazosFromInsumo != null)
                {
                    foreach (DalDeposito.InsumosReemplazo item in colInsumosReemplazosFromInsumo)
                    {
                        if (item.InsumoReemplazo != Codigo)
                        {
                            item.InsumoReemplazo = Codigo;
                        }
                    }
               }
		
                if (colInsumosPermitidos != null)
                {
                    foreach (DalDeposito.InsumosPermitido item in colInsumosPermitidos)
                    {
                        if (item.Insumo != Codigo)
                        {
                            item.Insumo = Codigo;
                        }
                    }
               }
		
                if (colInsumosSolicitudesLineas != null)
                {
                    foreach (DalDeposito.InsumosSolicitudesLinea item in colInsumosSolicitudesLineas)
                    {
                        if (item.Insumo != Codigo)
                        {
                            item.Insumo = Codigo;
                        }
                    }
               }
		
                if (colInsumosTemporalImpresionRecords != null)
                {
                    foreach (DalDeposito.InsumosTemporalImpresion item in colInsumosTemporalImpresionRecords)
                    {
                        if (item.IdInsumo != Codigo)
                        {
                            item.IdInsumo = Codigo;
                        }
                    }
               }
		}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
                if (colInsumosDescargasLineas != null)
                {
                    colInsumosDescargasLineas.SaveAll();
               }
		
                if (colInsumosConsumoAnualRecords != null)
                {
                    colInsumosConsumoAnualRecords.SaveAll();
               }
		
                if (colInsumosLlegadaRecords != null)
                {
                    colInsumosLlegadaRecords.SaveAll();
               }
		
                if (colInsumosPedidosLineas != null)
                {
                    colInsumosPedidosLineas.SaveAll();
               }
		
                if (colInsumosPedidosLineasFromInsumo != null)
                {
                    colInsumosPedidosLineasFromInsumo.SaveAll();
               }
		
                if (colInsumosPorProveedorRecords != null)
                {
                    colInsumosPorProveedorRecords.SaveAll();
               }
		
                if (colInsumosProvisionesLineas != null)
                {
                    colInsumosProvisionesLineas.SaveAll();
               }
		
                if (colInsumosReemplazos != null)
                {
                    colInsumosReemplazos.SaveAll();
               }
		
                if (colInsumosReemplazosFromInsumo != null)
                {
                    colInsumosReemplazosFromInsumo.SaveAll();
               }
		
                if (colInsumosPermitidos != null)
                {
                    colInsumosPermitidos.SaveAll();
               }
		
                if (colInsumosSolicitudesLineas != null)
                {
                    colInsumosSolicitudesLineas.SaveAll();
               }
		
                if (colInsumosTemporalImpresionRecords != null)
                {
                    colInsumosTemporalImpresionRecords.SaveAll();
               }
		}
        #endregion
	}
}
