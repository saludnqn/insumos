using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DalDeposito
{
	/// <summary>
	/// Strongly-typed collection for the InsumosSolicitude class.
	/// </summary>
    [Serializable]
	public partial class InsumosSolicitudeCollection : ActiveList<InsumosSolicitude, InsumosSolicitudeCollection>
	{	   
		public InsumosSolicitudeCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>InsumosSolicitudeCollection</returns>
		public InsumosSolicitudeCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                InsumosSolicitude o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Insumos_Solicitudes table.
	/// </summary>
	[Serializable]
	public partial class InsumosSolicitude : ActiveRecord<InsumosSolicitude>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public InsumosSolicitude()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public InsumosSolicitude(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public InsumosSolicitude(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public InsumosSolicitude(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Insumos_Solicitudes", TableType.Table, DataService.GetInstance("depProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarCodigo = new TableSchema.TableColumn(schema);
				colvarCodigo.ColumnName = "Codigo";
				colvarCodigo.DataType = DbType.Int32;
				colvarCodigo.MaxLength = 0;
				colvarCodigo.AutoIncrement = false;
				colvarCodigo.IsNullable = false;
				colvarCodigo.IsPrimaryKey = true;
				colvarCodigo.IsForeignKey = false;
				colvarCodigo.IsReadOnly = false;
				colvarCodigo.DefaultSetting = @"";
				colvarCodigo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCodigo);
				
				TableSchema.TableColumn colvarSistema = new TableSchema.TableColumn(schema);
				colvarSistema.ColumnName = "Sistema";
				colvarSistema.DataType = DbType.Byte;
				colvarSistema.MaxLength = 0;
				colvarSistema.AutoIncrement = false;
				colvarSistema.IsNullable = false;
				colvarSistema.IsPrimaryKey = false;
				colvarSistema.IsForeignKey = false;
				colvarSistema.IsReadOnly = false;
				
						colvarSistema.DefaultSetting = @"(1)";
				colvarSistema.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSistema);
				
				TableSchema.TableColumn colvarFecha = new TableSchema.TableColumn(schema);
				colvarFecha.ColumnName = "Fecha";
				colvarFecha.DataType = DbType.DateTime;
				colvarFecha.MaxLength = 0;
				colvarFecha.AutoIncrement = false;
				colvarFecha.IsNullable = false;
				colvarFecha.IsPrimaryKey = false;
				colvarFecha.IsForeignKey = false;
				colvarFecha.IsReadOnly = false;
				colvarFecha.DefaultSetting = @"";
				colvarFecha.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFecha);
				
				TableSchema.TableColumn colvarProveedor = new TableSchema.TableColumn(schema);
				colvarProveedor.ColumnName = "Proveedor";
				colvarProveedor.DataType = DbType.AnsiString;
				colvarProveedor.MaxLength = 50;
				colvarProveedor.AutoIncrement = false;
				colvarProveedor.IsNullable = false;
				colvarProveedor.IsPrimaryKey = false;
				colvarProveedor.IsForeignKey = false;
				colvarProveedor.IsReadOnly = false;
				colvarProveedor.DefaultSetting = @"";
				colvarProveedor.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProveedor);
				
				TableSchema.TableColumn colvarFechaMaximaEntrega = new TableSchema.TableColumn(schema);
				colvarFechaMaximaEntrega.ColumnName = "Fecha_maxima_entrega";
				colvarFechaMaximaEntrega.DataType = DbType.DateTime;
				colvarFechaMaximaEntrega.MaxLength = 0;
				colvarFechaMaximaEntrega.AutoIncrement = false;
				colvarFechaMaximaEntrega.IsNullable = true;
				colvarFechaMaximaEntrega.IsPrimaryKey = false;
				colvarFechaMaximaEntrega.IsForeignKey = false;
				colvarFechaMaximaEntrega.IsReadOnly = false;
				colvarFechaMaximaEntrega.DefaultSetting = @"";
				colvarFechaMaximaEntrega.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFechaMaximaEntrega);
				
				TableSchema.TableColumn colvarOrdenCompra = new TableSchema.TableColumn(schema);
				colvarOrdenCompra.ColumnName = "ordenCompra";
				colvarOrdenCompra.DataType = DbType.AnsiString;
				colvarOrdenCompra.MaxLength = 50;
				colvarOrdenCompra.AutoIncrement = false;
				colvarOrdenCompra.IsNullable = true;
				colvarOrdenCompra.IsPrimaryKey = false;
				colvarOrdenCompra.IsForeignKey = false;
				colvarOrdenCompra.IsReadOnly = false;
				colvarOrdenCompra.DefaultSetting = @"";
				colvarOrdenCompra.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOrdenCompra);
				
				TableSchema.TableColumn colvarObservaciones = new TableSchema.TableColumn(schema);
				colvarObservaciones.ColumnName = "Observaciones";
				colvarObservaciones.DataType = DbType.AnsiString;
				colvarObservaciones.MaxLength = 200;
				colvarObservaciones.AutoIncrement = false;
				colvarObservaciones.IsNullable = true;
				colvarObservaciones.IsPrimaryKey = false;
				colvarObservaciones.IsForeignKey = false;
				colvarObservaciones.IsReadOnly = false;
				colvarObservaciones.DefaultSetting = @"";
				colvarObservaciones.ForeignKeyTableName = "";
				schema.Columns.Add(colvarObservaciones);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["depProvider"].AddSchema("Insumos_Solicitudes",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Codigo")]
		[Bindable(true)]
		public int Codigo 
		{
			get { return GetColumnValue<int>(Columns.Codigo); }
			set { SetColumnValue(Columns.Codigo, value); }
		}
		  
		[XmlAttribute("Sistema")]
		[Bindable(true)]
		public byte Sistema 
		{
			get { return GetColumnValue<byte>(Columns.Sistema); }
			set { SetColumnValue(Columns.Sistema, value); }
		}
		  
		[XmlAttribute("Fecha")]
		[Bindable(true)]
		public DateTime Fecha 
		{
			get { return GetColumnValue<DateTime>(Columns.Fecha); }
			set { SetColumnValue(Columns.Fecha, value); }
		}
		  
		[XmlAttribute("Proveedor")]
		[Bindable(true)]
		public string Proveedor 
		{
			get { return GetColumnValue<string>(Columns.Proveedor); }
			set { SetColumnValue(Columns.Proveedor, value); }
		}
		  
		[XmlAttribute("FechaMaximaEntrega")]
		[Bindable(true)]
		public DateTime? FechaMaximaEntrega 
		{
			get { return GetColumnValue<DateTime?>(Columns.FechaMaximaEntrega); }
			set { SetColumnValue(Columns.FechaMaximaEntrega, value); }
		}
		  
		[XmlAttribute("OrdenCompra")]
		[Bindable(true)]
		public string OrdenCompra 
		{
			get { return GetColumnValue<string>(Columns.OrdenCompra); }
			set { SetColumnValue(Columns.OrdenCompra, value); }
		}
		  
		[XmlAttribute("Observaciones")]
		[Bindable(true)]
		public string Observaciones 
		{
			get { return GetColumnValue<string>(Columns.Observaciones); }
			set { SetColumnValue(Columns.Observaciones, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
				
		private DalDeposito.InsumosSolicitudesLineaCollection colInsumosSolicitudesLineas;
		public DalDeposito.InsumosSolicitudesLineaCollection InsumosSolicitudesLineas
		{
			get
			{
				if(colInsumosSolicitudesLineas == null)
				{
					colInsumosSolicitudesLineas = new DalDeposito.InsumosSolicitudesLineaCollection().Where(InsumosSolicitudesLinea.Columns.Solicitud, Codigo).Load();
					colInsumosSolicitudesLineas.ListChanged += new ListChangedEventHandler(colInsumosSolicitudesLineas_ListChanged);
				}
				return colInsumosSolicitudesLineas;			
			}
			set 
			{ 
					colInsumosSolicitudesLineas = value; 
					colInsumosSolicitudesLineas.ListChanged += new ListChangedEventHandler(colInsumosSolicitudesLineas_ListChanged);
			}
		}
		
		void colInsumosSolicitudesLineas_ListChanged(object sender, ListChangedEventArgs e)
		{
		    if (e.ListChangedType == ListChangedType.ItemAdded)
		    {
		        // Set foreign key value
		        colInsumosSolicitudesLineas[e.NewIndex].Solicitud = Codigo;
		    }
		}
		
		#endregion
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varCodigo,byte varSistema,DateTime varFecha,string varProveedor,DateTime? varFechaMaximaEntrega,string varOrdenCompra,string varObservaciones)
		{
			InsumosSolicitude item = new InsumosSolicitude();
			
			item.Codigo = varCodigo;
			
			item.Sistema = varSistema;
			
			item.Fecha = varFecha;
			
			item.Proveedor = varProveedor;
			
			item.FechaMaximaEntrega = varFechaMaximaEntrega;
			
			item.OrdenCompra = varOrdenCompra;
			
			item.Observaciones = varObservaciones;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varCodigo,byte varSistema,DateTime varFecha,string varProveedor,DateTime? varFechaMaximaEntrega,string varOrdenCompra,string varObservaciones)
		{
			InsumosSolicitude item = new InsumosSolicitude();
			
				item.Codigo = varCodigo;
			
				item.Sistema = varSistema;
			
				item.Fecha = varFecha;
			
				item.Proveedor = varProveedor;
			
				item.FechaMaximaEntrega = varFechaMaximaEntrega;
			
				item.OrdenCompra = varOrdenCompra;
			
				item.Observaciones = varObservaciones;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn CodigoColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn SistemaColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ProveedorColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaMaximaEntregaColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn OrdenCompraColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ObservacionesColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Codigo = @"Codigo";
			 public static string Sistema = @"Sistema";
			 public static string Fecha = @"Fecha";
			 public static string Proveedor = @"Proveedor";
			 public static string FechaMaximaEntrega = @"Fecha_maxima_entrega";
			 public static string OrdenCompra = @"ordenCompra";
			 public static string Observaciones = @"Observaciones";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
                if (colInsumosSolicitudesLineas != null)
                {
                    foreach (DalDeposito.InsumosSolicitudesLinea item in colInsumosSolicitudesLineas)
                    {
                        if (item.Solicitud != Codigo)
                        {
                            item.Solicitud = Codigo;
                        }
                    }
               }
		}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
                if (colInsumosSolicitudesLineas != null)
                {
                    colInsumosSolicitudesLineas.SaveAll();
               }
		}
        #endregion
	}
}
