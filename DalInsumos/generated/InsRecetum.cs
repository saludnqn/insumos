using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DalInsumos
{
	/// <summary>
	/// Strongly-typed collection for the InsRecetum class.
	/// </summary>
    [Serializable]
	public partial class InsRecetumCollection : ActiveList<InsRecetum, InsRecetumCollection>
	{	   
		public InsRecetumCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>InsRecetumCollection</returns>
		public InsRecetumCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                InsRecetum o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the INS_Receta table.
	/// </summary>
	[Serializable]
	public partial class InsRecetum : ActiveRecord<InsRecetum>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public InsRecetum()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public InsRecetum(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public InsRecetum(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public InsRecetum(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("INS_Receta", TableType.Table, DataService.GetInstance("insProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdReceta = new TableSchema.TableColumn(schema);
				colvarIdReceta.ColumnName = "idReceta";
				colvarIdReceta.DataType = DbType.Int32;
				colvarIdReceta.MaxLength = 0;
				colvarIdReceta.AutoIncrement = true;
				colvarIdReceta.IsNullable = false;
				colvarIdReceta.IsPrimaryKey = true;
				colvarIdReceta.IsForeignKey = false;
				colvarIdReceta.IsReadOnly = false;
				colvarIdReceta.DefaultSetting = @"";
				colvarIdReceta.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdReceta);
				
				TableSchema.TableColumn colvarIdEfector = new TableSchema.TableColumn(schema);
				colvarIdEfector.ColumnName = "idEfector";
				colvarIdEfector.DataType = DbType.Int32;
				colvarIdEfector.MaxLength = 0;
				colvarIdEfector.AutoIncrement = false;
				colvarIdEfector.IsNullable = true;
				colvarIdEfector.IsPrimaryKey = false;
				colvarIdEfector.IsForeignKey = true;
				colvarIdEfector.IsReadOnly = false;
				colvarIdEfector.DefaultSetting = @"";
				
					colvarIdEfector.ForeignKeyTableName = "Sys_Efector";
				schema.Columns.Add(colvarIdEfector);
				
				TableSchema.TableColumn colvarIdPaciente = new TableSchema.TableColumn(schema);
				colvarIdPaciente.ColumnName = "idPaciente";
				colvarIdPaciente.DataType = DbType.Int32;
				colvarIdPaciente.MaxLength = 0;
				colvarIdPaciente.AutoIncrement = false;
				colvarIdPaciente.IsNullable = true;
				colvarIdPaciente.IsPrimaryKey = false;
				colvarIdPaciente.IsForeignKey = true;
				colvarIdPaciente.IsReadOnly = false;
				colvarIdPaciente.DefaultSetting = @"";
				
					colvarIdPaciente.ForeignKeyTableName = "Sys_Paciente";
				schema.Columns.Add(colvarIdPaciente);
				
				TableSchema.TableColumn colvarEdad = new TableSchema.TableColumn(schema);
				colvarEdad.ColumnName = "edad";
				colvarEdad.DataType = DbType.Int32;
				colvarEdad.MaxLength = 0;
				colvarEdad.AutoIncrement = false;
				colvarEdad.IsNullable = true;
				colvarEdad.IsPrimaryKey = false;
				colvarEdad.IsForeignKey = false;
				colvarEdad.IsReadOnly = false;
				colvarEdad.DefaultSetting = @"";
				colvarEdad.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEdad);
				
				TableSchema.TableColumn colvarUnidad = new TableSchema.TableColumn(schema);
				colvarUnidad.ColumnName = "unidad";
				colvarUnidad.DataType = DbType.AnsiString;
				colvarUnidad.MaxLength = 20;
				colvarUnidad.AutoIncrement = false;
				colvarUnidad.IsNullable = true;
				colvarUnidad.IsPrimaryKey = false;
				colvarUnidad.IsForeignKey = false;
				colvarUnidad.IsReadOnly = false;
				colvarUnidad.DefaultSetting = @"";
				colvarUnidad.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnidad);
				
				TableSchema.TableColumn colvarIdTipoPrescripcion = new TableSchema.TableColumn(schema);
				colvarIdTipoPrescripcion.ColumnName = "idTipoPrescripcion";
				colvarIdTipoPrescripcion.DataType = DbType.Int32;
				colvarIdTipoPrescripcion.MaxLength = 0;
				colvarIdTipoPrescripcion.AutoIncrement = false;
				colvarIdTipoPrescripcion.IsNullable = true;
				colvarIdTipoPrescripcion.IsPrimaryKey = false;
				colvarIdTipoPrescripcion.IsForeignKey = false;
				colvarIdTipoPrescripcion.IsReadOnly = false;
				colvarIdTipoPrescripcion.DefaultSetting = @"";
				colvarIdTipoPrescripcion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdTipoPrescripcion);
				
				TableSchema.TableColumn colvarIdObraSocial = new TableSchema.TableColumn(schema);
				colvarIdObraSocial.ColumnName = "idObraSocial";
				colvarIdObraSocial.DataType = DbType.Int32;
				colvarIdObraSocial.MaxLength = 0;
				colvarIdObraSocial.AutoIncrement = false;
				colvarIdObraSocial.IsNullable = true;
				colvarIdObraSocial.IsPrimaryKey = false;
				colvarIdObraSocial.IsForeignKey = true;
				colvarIdObraSocial.IsReadOnly = false;
				colvarIdObraSocial.DefaultSetting = @"";
				
					colvarIdObraSocial.ForeignKeyTableName = "Sys_ObraSocial";
				schema.Columns.Add(colvarIdObraSocial);
				
				TableSchema.TableColumn colvarIdProfesional = new TableSchema.TableColumn(schema);
				colvarIdProfesional.ColumnName = "idProfesional";
				colvarIdProfesional.DataType = DbType.Int32;
				colvarIdProfesional.MaxLength = 0;
				colvarIdProfesional.AutoIncrement = false;
				colvarIdProfesional.IsNullable = true;
				colvarIdProfesional.IsPrimaryKey = false;
				colvarIdProfesional.IsForeignKey = true;
				colvarIdProfesional.IsReadOnly = false;
				colvarIdProfesional.DefaultSetting = @"";
				
					colvarIdProfesional.ForeignKeyTableName = "Sys_Profesional";
				schema.Columns.Add(colvarIdProfesional);
				
				TableSchema.TableColumn colvarDiagnostico = new TableSchema.TableColumn(schema);
				colvarDiagnostico.ColumnName = "diagnostico";
				colvarDiagnostico.DataType = DbType.AnsiString;
				colvarDiagnostico.MaxLength = 200;
				colvarDiagnostico.AutoIncrement = false;
				colvarDiagnostico.IsNullable = true;
				colvarDiagnostico.IsPrimaryKey = false;
				colvarDiagnostico.IsForeignKey = false;
				colvarDiagnostico.IsReadOnly = false;
				colvarDiagnostico.DefaultSetting = @"";
				colvarDiagnostico.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiagnostico);
				
				TableSchema.TableColumn colvarIdCODCie10 = new TableSchema.TableColumn(schema);
				colvarIdCODCie10.ColumnName = "idCODCie10";
				colvarIdCODCie10.DataType = DbType.Int32;
				colvarIdCODCie10.MaxLength = 0;
				colvarIdCODCie10.AutoIncrement = false;
				colvarIdCODCie10.IsNullable = true;
				colvarIdCODCie10.IsPrimaryKey = false;
				colvarIdCODCie10.IsForeignKey = true;
				colvarIdCODCie10.IsReadOnly = false;
				colvarIdCODCie10.DefaultSetting = @"";
				
					colvarIdCODCie10.ForeignKeyTableName = "Sys_CIE10";
				schema.Columns.Add(colvarIdCODCie10);
				
				TableSchema.TableColumn colvarFecha = new TableSchema.TableColumn(schema);
				colvarFecha.ColumnName = "fecha";
				colvarFecha.DataType = DbType.DateTime;
				colvarFecha.MaxLength = 0;
				colvarFecha.AutoIncrement = false;
				colvarFecha.IsNullable = true;
				colvarFecha.IsPrimaryKey = false;
				colvarFecha.IsForeignKey = false;
				colvarFecha.IsReadOnly = false;
				colvarFecha.DefaultSetting = @"";
				colvarFecha.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFecha);
				
				TableSchema.TableColumn colvarObservaciones = new TableSchema.TableColumn(schema);
				colvarObservaciones.ColumnName = "observaciones";
				colvarObservaciones.DataType = DbType.AnsiString;
				colvarObservaciones.MaxLength = 500;
				colvarObservaciones.AutoIncrement = false;
				colvarObservaciones.IsNullable = true;
				colvarObservaciones.IsPrimaryKey = false;
				colvarObservaciones.IsForeignKey = false;
				colvarObservaciones.IsReadOnly = false;
				colvarObservaciones.DefaultSetting = @"";
				colvarObservaciones.ForeignKeyTableName = "";
				schema.Columns.Add(colvarObservaciones);
				
				TableSchema.TableColumn colvarIdTipoTratamiento = new TableSchema.TableColumn(schema);
				colvarIdTipoTratamiento.ColumnName = "idTipoTratamiento";
				colvarIdTipoTratamiento.DataType = DbType.Int32;
				colvarIdTipoTratamiento.MaxLength = 0;
				colvarIdTipoTratamiento.AutoIncrement = false;
				colvarIdTipoTratamiento.IsNullable = true;
				colvarIdTipoTratamiento.IsPrimaryKey = false;
				colvarIdTipoTratamiento.IsForeignKey = false;
				colvarIdTipoTratamiento.IsReadOnly = false;
				colvarIdTipoTratamiento.DefaultSetting = @"";
				colvarIdTipoTratamiento.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdTipoTratamiento);
				
				TableSchema.TableColumn colvarDuracion = new TableSchema.TableColumn(schema);
				colvarDuracion.ColumnName = "duracion";
				colvarDuracion.DataType = DbType.Int32;
				colvarDuracion.MaxLength = 0;
				colvarDuracion.AutoIncrement = false;
				colvarDuracion.IsNullable = true;
				colvarDuracion.IsPrimaryKey = false;
				colvarDuracion.IsForeignKey = false;
				colvarDuracion.IsReadOnly = false;
				colvarDuracion.DefaultSetting = @"";
				colvarDuracion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDuracion);
				
				TableSchema.TableColumn colvarUnidadDuracion = new TableSchema.TableColumn(schema);
				colvarUnidadDuracion.ColumnName = "unidadDuracion";
				colvarUnidadDuracion.DataType = DbType.AnsiString;
				colvarUnidadDuracion.MaxLength = 10;
				colvarUnidadDuracion.AutoIncrement = false;
				colvarUnidadDuracion.IsNullable = true;
				colvarUnidadDuracion.IsPrimaryKey = false;
				colvarUnidadDuracion.IsForeignKey = false;
				colvarUnidadDuracion.IsReadOnly = false;
				colvarUnidadDuracion.DefaultSetting = @"";
				colvarUnidadDuracion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnidadDuracion);
				
				TableSchema.TableColumn colvarNumeroDispensación = new TableSchema.TableColumn(schema);
				colvarNumeroDispensación.ColumnName = "numeroDispensación";
				colvarNumeroDispensación.DataType = DbType.Int32;
				colvarNumeroDispensación.MaxLength = 0;
				colvarNumeroDispensación.AutoIncrement = false;
				colvarNumeroDispensación.IsNullable = true;
				colvarNumeroDispensación.IsPrimaryKey = false;
				colvarNumeroDispensación.IsForeignKey = false;
				colvarNumeroDispensación.IsReadOnly = false;
				colvarNumeroDispensación.DefaultSetting = @"";
				colvarNumeroDispensación.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNumeroDispensación);
				
				TableSchema.TableColumn colvarBaja = new TableSchema.TableColumn(schema);
				colvarBaja.ColumnName = "baja";
				colvarBaja.DataType = DbType.Boolean;
				colvarBaja.MaxLength = 0;
				colvarBaja.AutoIncrement = false;
				colvarBaja.IsNullable = false;
				colvarBaja.IsPrimaryKey = false;
				colvarBaja.IsForeignKey = false;
				colvarBaja.IsReadOnly = false;
				
						colvarBaja.DefaultSetting = @"((0))";
				colvarBaja.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBaja);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				
						colvarCreatedBy.DefaultSetting = @"('')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				
						colvarCreatedOn.DefaultSetting = @"(((1)/(1))/(1900))";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				
						colvarModifiedBy.DefaultSetting = @"('')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				
						colvarModifiedOn.DefaultSetting = @"(((1)/(1))/(1900))";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["insProvider"].AddSchema("INS_Receta",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdReceta")]
		[Bindable(true)]
		public int IdReceta 
		{
			get { return GetColumnValue<int>(Columns.IdReceta); }
			set { SetColumnValue(Columns.IdReceta, value); }
		}
		  
		[XmlAttribute("IdEfector")]
		[Bindable(true)]
		public int? IdEfector 
		{
			get { return GetColumnValue<int?>(Columns.IdEfector); }
			set { SetColumnValue(Columns.IdEfector, value); }
		}
		  
		[XmlAttribute("IdPaciente")]
		[Bindable(true)]
		public int? IdPaciente 
		{
			get { return GetColumnValue<int?>(Columns.IdPaciente); }
			set { SetColumnValue(Columns.IdPaciente, value); }
		}
		  
		[XmlAttribute("Edad")]
		[Bindable(true)]
		public int? Edad 
		{
			get { return GetColumnValue<int?>(Columns.Edad); }
			set { SetColumnValue(Columns.Edad, value); }
		}
		  
		[XmlAttribute("Unidad")]
		[Bindable(true)]
		public string Unidad 
		{
			get { return GetColumnValue<string>(Columns.Unidad); }
			set { SetColumnValue(Columns.Unidad, value); }
		}
		  
		[XmlAttribute("IdTipoPrescripcion")]
		[Bindable(true)]
		public int? IdTipoPrescripcion 
		{
			get { return GetColumnValue<int?>(Columns.IdTipoPrescripcion); }
			set { SetColumnValue(Columns.IdTipoPrescripcion, value); }
		}
		  
		[XmlAttribute("IdObraSocial")]
		[Bindable(true)]
		public int? IdObraSocial 
		{
			get { return GetColumnValue<int?>(Columns.IdObraSocial); }
			set { SetColumnValue(Columns.IdObraSocial, value); }
		}
		  
		[XmlAttribute("IdProfesional")]
		[Bindable(true)]
		public int? IdProfesional 
		{
			get { return GetColumnValue<int?>(Columns.IdProfesional); }
			set { SetColumnValue(Columns.IdProfesional, value); }
		}
		  
		[XmlAttribute("Diagnostico")]
		[Bindable(true)]
		public string Diagnostico 
		{
			get { return GetColumnValue<string>(Columns.Diagnostico); }
			set { SetColumnValue(Columns.Diagnostico, value); }
		}
		  
		[XmlAttribute("IdCODCie10")]
		[Bindable(true)]
		public int? IdCODCie10 
		{
			get { return GetColumnValue<int?>(Columns.IdCODCie10); }
			set { SetColumnValue(Columns.IdCODCie10, value); }
		}
		  
		[XmlAttribute("Fecha")]
		[Bindable(true)]
		public DateTime? Fecha 
		{
			get { return GetColumnValue<DateTime?>(Columns.Fecha); }
			set { SetColumnValue(Columns.Fecha, value); }
		}
		  
		[XmlAttribute("Observaciones")]
		[Bindable(true)]
		public string Observaciones 
		{
			get { return GetColumnValue<string>(Columns.Observaciones); }
			set { SetColumnValue(Columns.Observaciones, value); }
		}
		  
		[XmlAttribute("IdTipoTratamiento")]
		[Bindable(true)]
		public int? IdTipoTratamiento 
		{
			get { return GetColumnValue<int?>(Columns.IdTipoTratamiento); }
			set { SetColumnValue(Columns.IdTipoTratamiento, value); }
		}
		  
		[XmlAttribute("Duracion")]
		[Bindable(true)]
		public int? Duracion 
		{
			get { return GetColumnValue<int?>(Columns.Duracion); }
			set { SetColumnValue(Columns.Duracion, value); }
		}
		  
		[XmlAttribute("UnidadDuracion")]
		[Bindable(true)]
		public string UnidadDuracion 
		{
			get { return GetColumnValue<string>(Columns.UnidadDuracion); }
			set { SetColumnValue(Columns.UnidadDuracion, value); }
		}
		  
		[XmlAttribute("NumeroDispensación")]
		[Bindable(true)]
		public int? NumeroDispensación 
		{
			get { return GetColumnValue<int?>(Columns.NumeroDispensación); }
			set { SetColumnValue(Columns.NumeroDispensación, value); }
		}
		  
		[XmlAttribute("Baja")]
		[Bindable(true)]
		public bool Baja 
		{
			get { return GetColumnValue<bool>(Columns.Baja); }
			set { SetColumnValue(Columns.Baja, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime CreatedOn 
		{
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedBy")]
		[Bindable(true)]
		public string ModifiedBy 
		{
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime ModifiedOn 
		{
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a SysProfesional ActiveRecord object related to this InsRecetum
		/// 
		/// </summary>
		public DalInsumos.SysProfesional SysProfesional
		{
			get { return DalInsumos.SysProfesional.FetchByID(this.IdProfesional); }
			set { SetColumnValue("idProfesional", value.IdProfesional); }
		}
		
		
		/// <summary>
		/// Returns a SysCIE10 ActiveRecord object related to this InsRecetum
		/// 
		/// </summary>
		public DalInsumos.SysCIE10 SysCIE10
		{
			get { return DalInsumos.SysCIE10.FetchByID(this.IdCODCie10); }
			set { SetColumnValue("idCODCie10", value.Id); }
		}
		
		
		/// <summary>
		/// Returns a SysPaciente ActiveRecord object related to this InsRecetum
		/// 
		/// </summary>
		public DalInsumos.SysPaciente SysPaciente
		{
			get { return DalInsumos.SysPaciente.FetchByID(this.IdPaciente); }
			set { SetColumnValue("idPaciente", value.IdPaciente); }
		}
		
		
		/// <summary>
		/// Returns a SysObraSocial ActiveRecord object related to this InsRecetum
		/// 
		/// </summary>
		public DalInsumos.SysObraSocial SysObraSocial
		{
			get { return DalInsumos.SysObraSocial.FetchByID(this.IdObraSocial); }
			set { SetColumnValue("idObraSocial", value.IdObraSocial); }
		}
		
		
		/// <summary>
		/// Returns a SysEfector ActiveRecord object related to this InsRecetum
		/// 
		/// </summary>
		public DalInsumos.SysEfector SysEfector
		{
			get { return DalInsumos.SysEfector.FetchByID(this.IdEfector); }
			set { SetColumnValue("idEfector", value.IdEfector); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varIdEfector,int? varIdPaciente,int? varEdad,string varUnidad,int? varIdTipoPrescripcion,int? varIdObraSocial,int? varIdProfesional,string varDiagnostico,int? varIdCODCie10,DateTime? varFecha,string varObservaciones,int? varIdTipoTratamiento,int? varDuracion,string varUnidadDuracion,int? varNumeroDispensación,bool varBaja,string varCreatedBy,DateTime varCreatedOn,string varModifiedBy,DateTime varModifiedOn)
		{
			InsRecetum item = new InsRecetum();
			
			item.IdEfector = varIdEfector;
			
			item.IdPaciente = varIdPaciente;
			
			item.Edad = varEdad;
			
			item.Unidad = varUnidad;
			
			item.IdTipoPrescripcion = varIdTipoPrescripcion;
			
			item.IdObraSocial = varIdObraSocial;
			
			item.IdProfesional = varIdProfesional;
			
			item.Diagnostico = varDiagnostico;
			
			item.IdCODCie10 = varIdCODCie10;
			
			item.Fecha = varFecha;
			
			item.Observaciones = varObservaciones;
			
			item.IdTipoTratamiento = varIdTipoTratamiento;
			
			item.Duracion = varDuracion;
			
			item.UnidadDuracion = varUnidadDuracion;
			
			item.NumeroDispensación = varNumeroDispensación;
			
			item.Baja = varBaja;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedBy = varModifiedBy;
			
			item.ModifiedOn = varModifiedOn;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varIdReceta,int? varIdEfector,int? varIdPaciente,int? varEdad,string varUnidad,int? varIdTipoPrescripcion,int? varIdObraSocial,int? varIdProfesional,string varDiagnostico,int? varIdCODCie10,DateTime? varFecha,string varObservaciones,int? varIdTipoTratamiento,int? varDuracion,string varUnidadDuracion,int? varNumeroDispensación,bool varBaja,string varCreatedBy,DateTime varCreatedOn,string varModifiedBy,DateTime varModifiedOn)
		{
			InsRecetum item = new InsRecetum();
			
				item.IdReceta = varIdReceta;
			
				item.IdEfector = varIdEfector;
			
				item.IdPaciente = varIdPaciente;
			
				item.Edad = varEdad;
			
				item.Unidad = varUnidad;
			
				item.IdTipoPrescripcion = varIdTipoPrescripcion;
			
				item.IdObraSocial = varIdObraSocial;
			
				item.IdProfesional = varIdProfesional;
			
				item.Diagnostico = varDiagnostico;
			
				item.IdCODCie10 = varIdCODCie10;
			
				item.Fecha = varFecha;
			
				item.Observaciones = varObservaciones;
			
				item.IdTipoTratamiento = varIdTipoTratamiento;
			
				item.Duracion = varDuracion;
			
				item.UnidadDuracion = varUnidadDuracion;
			
				item.NumeroDispensación = varNumeroDispensación;
			
				item.Baja = varBaja;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedBy = varModifiedBy;
			
				item.ModifiedOn = varModifiedOn;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdRecetaColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn IdEfectorColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn IdPacienteColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn EdadColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn UnidadColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn IdTipoPrescripcionColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn IdObraSocialColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn IdProfesionalColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn DiagnosticoColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn IdCODCie10Column
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn ObservacionesColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn IdTipoTratamientoColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn DuracionColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn UnidadDuracionColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn NumeroDispensaciónColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn BajaColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdReceta = @"idReceta";
			 public static string IdEfector = @"idEfector";
			 public static string IdPaciente = @"idPaciente";
			 public static string Edad = @"edad";
			 public static string Unidad = @"unidad";
			 public static string IdTipoPrescripcion = @"idTipoPrescripcion";
			 public static string IdObraSocial = @"idObraSocial";
			 public static string IdProfesional = @"idProfesional";
			 public static string Diagnostico = @"diagnostico";
			 public static string IdCODCie10 = @"idCODCie10";
			 public static string Fecha = @"fecha";
			 public static string Observaciones = @"observaciones";
			 public static string IdTipoTratamiento = @"idTipoTratamiento";
			 public static string Duracion = @"duracion";
			 public static string UnidadDuracion = @"unidadDuracion";
			 public static string NumeroDispensación = @"numeroDispensación";
			 public static string Baja = @"baja";
			 public static string CreatedBy = @"CreatedBy";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedBy = @"ModifiedBy";
			 public static string ModifiedOn = @"ModifiedOn";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
