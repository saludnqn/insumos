using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DalInsumos
{
	/// <summary>
	/// Strongly-typed collection for the InsDeposito class.
	/// </summary>
    [Serializable]
	public partial class InsDepositoCollection : ActiveList<InsDeposito, InsDepositoCollection>
	{	   
		public InsDepositoCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>InsDepositoCollection</returns>
		public InsDepositoCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                InsDeposito o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the INS_Deposito table.
	/// </summary>
	[Serializable]
	public partial class InsDeposito : ActiveRecord<InsDeposito>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public InsDeposito()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public InsDeposito(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public InsDeposito(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public InsDeposito(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("INS_Deposito", TableType.Table, DataService.GetInstance("insProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdDeposito = new TableSchema.TableColumn(schema);
				colvarIdDeposito.ColumnName = "idDeposito";
				colvarIdDeposito.DataType = DbType.Int32;
				colvarIdDeposito.MaxLength = 0;
				colvarIdDeposito.AutoIncrement = true;
				colvarIdDeposito.IsNullable = false;
				colvarIdDeposito.IsPrimaryKey = true;
				colvarIdDeposito.IsForeignKey = false;
				colvarIdDeposito.IsReadOnly = false;
				colvarIdDeposito.DefaultSetting = @"";
				colvarIdDeposito.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdDeposito);
				
				TableSchema.TableColumn colvarCodigo = new TableSchema.TableColumn(schema);
				colvarCodigo.ColumnName = "codigo";
				colvarCodigo.DataType = DbType.Int32;
				colvarCodigo.MaxLength = 0;
				colvarCodigo.AutoIncrement = false;
				colvarCodigo.IsNullable = false;
				colvarCodigo.IsPrimaryKey = false;
				colvarCodigo.IsForeignKey = false;
				colvarCodigo.IsReadOnly = false;
				
						colvarCodigo.DefaultSetting = @"((0))";
				colvarCodigo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCodigo);
				
				TableSchema.TableColumn colvarNombre = new TableSchema.TableColumn(schema);
				colvarNombre.ColumnName = "nombre";
				colvarNombre.DataType = DbType.AnsiString;
				colvarNombre.MaxLength = 100;
				colvarNombre.AutoIncrement = false;
				colvarNombre.IsNullable = false;
				colvarNombre.IsPrimaryKey = false;
				colvarNombre.IsForeignKey = false;
				colvarNombre.IsReadOnly = false;
				
						colvarNombre.DefaultSetting = @"('')";
				colvarNombre.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNombre);
				
				TableSchema.TableColumn colvarDescripcion = new TableSchema.TableColumn(schema);
				colvarDescripcion.ColumnName = "descripcion";
				colvarDescripcion.DataType = DbType.AnsiString;
				colvarDescripcion.MaxLength = 300;
				colvarDescripcion.AutoIncrement = false;
				colvarDescripcion.IsNullable = false;
				colvarDescripcion.IsPrimaryKey = false;
				colvarDescripcion.IsForeignKey = false;
				colvarDescripcion.IsReadOnly = false;
				
						colvarDescripcion.DefaultSetting = @"('')";
				colvarDescripcion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescripcion);
				
				TableSchema.TableColumn colvarObservacion = new TableSchema.TableColumn(schema);
				colvarObservacion.ColumnName = "observacion";
				colvarObservacion.DataType = DbType.AnsiString;
				colvarObservacion.MaxLength = 300;
				colvarObservacion.AutoIncrement = false;
				colvarObservacion.IsNullable = false;
				colvarObservacion.IsPrimaryKey = false;
				colvarObservacion.IsForeignKey = false;
				colvarObservacion.IsReadOnly = false;
				
						colvarObservacion.DefaultSetting = @"('')";
				colvarObservacion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarObservacion);
				
				TableSchema.TableColumn colvarFecha = new TableSchema.TableColumn(schema);
				colvarFecha.ColumnName = "fecha";
				colvarFecha.DataType = DbType.DateTime;
				colvarFecha.MaxLength = 0;
				colvarFecha.AutoIncrement = false;
				colvarFecha.IsNullable = false;
				colvarFecha.IsPrimaryKey = false;
				colvarFecha.IsForeignKey = false;
				colvarFecha.IsReadOnly = false;
				
						colvarFecha.DefaultSetting = @"(((1)/(1))/(1900))";
				colvarFecha.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFecha);
				
				TableSchema.TableColumn colvarIdDepositoSuperior = new TableSchema.TableColumn(schema);
				colvarIdDepositoSuperior.ColumnName = "idDepositoSuperior";
				colvarIdDepositoSuperior.DataType = DbType.Int32;
				colvarIdDepositoSuperior.MaxLength = 0;
				colvarIdDepositoSuperior.AutoIncrement = false;
				colvarIdDepositoSuperior.IsNullable = false;
				colvarIdDepositoSuperior.IsPrimaryKey = false;
				colvarIdDepositoSuperior.IsForeignKey = true;
				colvarIdDepositoSuperior.IsReadOnly = false;
				
						colvarIdDepositoSuperior.DefaultSetting = @"((0))";
				
					colvarIdDepositoSuperior.ForeignKeyTableName = "INS_Deposito";
				schema.Columns.Add(colvarIdDepositoSuperior);
				
				TableSchema.TableColumn colvarIdEfector = new TableSchema.TableColumn(schema);
				colvarIdEfector.ColumnName = "idEfector";
				colvarIdEfector.DataType = DbType.Int32;
				colvarIdEfector.MaxLength = 0;
				colvarIdEfector.AutoIncrement = false;
				colvarIdEfector.IsNullable = false;
				colvarIdEfector.IsPrimaryKey = false;
				colvarIdEfector.IsForeignKey = true;
				colvarIdEfector.IsReadOnly = false;
				
						colvarIdEfector.DefaultSetting = @"((0))";
				
					colvarIdEfector.ForeignKeyTableName = "Sys_Efector";
				schema.Columns.Add(colvarIdEfector);
				
				TableSchema.TableColumn colvarIdServicio = new TableSchema.TableColumn(schema);
				colvarIdServicio.ColumnName = "idServicio";
				colvarIdServicio.DataType = DbType.Int32;
				colvarIdServicio.MaxLength = 0;
				colvarIdServicio.AutoIncrement = false;
				colvarIdServicio.IsNullable = false;
				colvarIdServicio.IsPrimaryKey = false;
				colvarIdServicio.IsForeignKey = true;
				colvarIdServicio.IsReadOnly = false;
				
						colvarIdServicio.DefaultSetting = @"((0))";
				
					colvarIdServicio.ForeignKeyTableName = "Sys_Servicio";
				schema.Columns.Add(colvarIdServicio);
				
				TableSchema.TableColumn colvarIdTipoDeposito = new TableSchema.TableColumn(schema);
				colvarIdTipoDeposito.ColumnName = "idTipoDeposito";
				colvarIdTipoDeposito.DataType = DbType.Int32;
				colvarIdTipoDeposito.MaxLength = 0;
				colvarIdTipoDeposito.AutoIncrement = false;
				colvarIdTipoDeposito.IsNullable = false;
				colvarIdTipoDeposito.IsPrimaryKey = false;
				colvarIdTipoDeposito.IsForeignKey = true;
				colvarIdTipoDeposito.IsReadOnly = false;
				
						colvarIdTipoDeposito.DefaultSetting = @"((0))";
				
					colvarIdTipoDeposito.ForeignKeyTableName = "INS_TipoDeposito";
				schema.Columns.Add(colvarIdTipoDeposito);
				
				TableSchema.TableColumn colvarBaja = new TableSchema.TableColumn(schema);
				colvarBaja.ColumnName = "baja";
				colvarBaja.DataType = DbType.Boolean;
				colvarBaja.MaxLength = 0;
				colvarBaja.AutoIncrement = false;
				colvarBaja.IsNullable = false;
				colvarBaja.IsPrimaryKey = false;
				colvarBaja.IsForeignKey = false;
				colvarBaja.IsReadOnly = false;
				
						colvarBaja.DefaultSetting = @"((0))";
				colvarBaja.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBaja);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				
						colvarCreatedBy.DefaultSetting = @"('')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				
						colvarCreatedOn.DefaultSetting = @"(((1)/(1))/(1900))";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				
						colvarModifiedBy.DefaultSetting = @"('')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				
						colvarModifiedOn.DefaultSetting = @"(((1)/(1))/(1900))";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				TableSchema.TableColumn colvarSelected = new TableSchema.TableColumn(schema);
				colvarSelected.ColumnName = "selected";
				colvarSelected.DataType = DbType.Boolean;
				colvarSelected.MaxLength = 0;
				colvarSelected.AutoIncrement = false;
				colvarSelected.IsNullable = false;
				colvarSelected.IsPrimaryKey = false;
				colvarSelected.IsForeignKey = false;
				colvarSelected.IsReadOnly = false;
				
						colvarSelected.DefaultSetting = @"((0))";
				colvarSelected.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSelected);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["insProvider"].AddSchema("INS_Deposito",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdDeposito")]
		[Bindable(true)]
		public int IdDeposito 
		{
			get { return GetColumnValue<int>(Columns.IdDeposito); }
			set { SetColumnValue(Columns.IdDeposito, value); }
		}
		  
		[XmlAttribute("Codigo")]
		[Bindable(true)]
		public int Codigo 
		{
			get { return GetColumnValue<int>(Columns.Codigo); }
			set { SetColumnValue(Columns.Codigo, value); }
		}
		  
		[XmlAttribute("Nombre")]
		[Bindable(true)]
		public string Nombre 
		{
			get { return GetColumnValue<string>(Columns.Nombre); }
			set { SetColumnValue(Columns.Nombre, value); }
		}
		  
		[XmlAttribute("Descripcion")]
		[Bindable(true)]
		public string Descripcion 
		{
			get { return GetColumnValue<string>(Columns.Descripcion); }
			set { SetColumnValue(Columns.Descripcion, value); }
		}
		  
		[XmlAttribute("Observacion")]
		[Bindable(true)]
		public string Observacion 
		{
			get { return GetColumnValue<string>(Columns.Observacion); }
			set { SetColumnValue(Columns.Observacion, value); }
		}
		  
		[XmlAttribute("Fecha")]
		[Bindable(true)]
		public DateTime Fecha 
		{
			get { return GetColumnValue<DateTime>(Columns.Fecha); }
			set { SetColumnValue(Columns.Fecha, value); }
		}
		  
		[XmlAttribute("IdDepositoSuperior")]
		[Bindable(true)]
		public int IdDepositoSuperior 
		{
			get { return GetColumnValue<int>(Columns.IdDepositoSuperior); }
			set { SetColumnValue(Columns.IdDepositoSuperior, value); }
		}
		  
		[XmlAttribute("IdEfector")]
		[Bindable(true)]
		public int IdEfector 
		{
			get { return GetColumnValue<int>(Columns.IdEfector); }
			set { SetColumnValue(Columns.IdEfector, value); }
		}
		  
		[XmlAttribute("IdServicio")]
		[Bindable(true)]
		public int IdServicio 
		{
			get { return GetColumnValue<int>(Columns.IdServicio); }
			set { SetColumnValue(Columns.IdServicio, value); }
		}
		  
		[XmlAttribute("IdTipoDeposito")]
		[Bindable(true)]
		public int IdTipoDeposito 
		{
			get { return GetColumnValue<int>(Columns.IdTipoDeposito); }
			set { SetColumnValue(Columns.IdTipoDeposito, value); }
		}
		  
		[XmlAttribute("Baja")]
		[Bindable(true)]
		public bool Baja 
		{
			get { return GetColumnValue<bool>(Columns.Baja); }
			set { SetColumnValue(Columns.Baja, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime CreatedOn 
		{
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedBy")]
		[Bindable(true)]
		public string ModifiedBy 
		{
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime ModifiedOn 
		{
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		  
		[XmlAttribute("Selected")]
		[Bindable(true)]
		public bool Selected 
		{
			get { return GetColumnValue<bool>(Columns.Selected); }
			set { SetColumnValue(Columns.Selected, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
				
		private DalInsumos.InsDepositoCollection colChildInsDepositoRecords;
		public DalInsumos.InsDepositoCollection ChildInsDepositoRecords
		{
			get
			{
				if(colChildInsDepositoRecords == null)
				{
					colChildInsDepositoRecords = new DalInsumos.InsDepositoCollection().Where(InsDeposito.Columns.IdDepositoSuperior, IdDeposito).Load();
					colChildInsDepositoRecords.ListChanged += new ListChangedEventHandler(colChildInsDepositoRecords_ListChanged);
				}
				return colChildInsDepositoRecords;			
			}
			set 
			{ 
					colChildInsDepositoRecords = value; 
					colChildInsDepositoRecords.ListChanged += new ListChangedEventHandler(colChildInsDepositoRecords_ListChanged);
			}
		}
		
		void colChildInsDepositoRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
		    if (e.ListChangedType == ListChangedType.ItemAdded)
		    {
		        // Set foreign key value
		        colChildInsDepositoRecords[e.NewIndex].IdDepositoSuperior = IdDeposito;
		    }
		}
				
		private DalInsumos.InsDispensacionCollection colInsDispensacionRecords;
		public DalInsumos.InsDispensacionCollection InsDispensacionRecords
		{
			get
			{
				if(colInsDispensacionRecords == null)
				{
					colInsDispensacionRecords = new DalInsumos.InsDispensacionCollection().Where(InsDispensacion.Columns.IdDeposito, IdDeposito).Load();
					colInsDispensacionRecords.ListChanged += new ListChangedEventHandler(colInsDispensacionRecords_ListChanged);
				}
				return colInsDispensacionRecords;			
			}
			set 
			{ 
					colInsDispensacionRecords = value; 
					colInsDispensacionRecords.ListChanged += new ListChangedEventHandler(colInsDispensacionRecords_ListChanged);
			}
		}
		
		void colInsDispensacionRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
		    if (e.ListChangedType == ListChangedType.ItemAdded)
		    {
		        // Set foreign key value
		        colInsDispensacionRecords[e.NewIndex].IdDeposito = IdDeposito;
		    }
		}
				
		private DalInsumos.InsPedidoCollection colInsPedidoRecords;
		public DalInsumos.InsPedidoCollection InsPedidoRecords
		{
			get
			{
				if(colInsPedidoRecords == null)
				{
					colInsPedidoRecords = new DalInsumos.InsPedidoCollection().Where(InsPedido.Columns.IdDeposito, IdDeposito).Load();
					colInsPedidoRecords.ListChanged += new ListChangedEventHandler(colInsPedidoRecords_ListChanged);
				}
				return colInsPedidoRecords;			
			}
			set 
			{ 
					colInsPedidoRecords = value; 
					colInsPedidoRecords.ListChanged += new ListChangedEventHandler(colInsPedidoRecords_ListChanged);
			}
		}
		
		void colInsPedidoRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
		    if (e.ListChangedType == ListChangedType.ItemAdded)
		    {
		        // Set foreign key value
		        colInsPedidoRecords[e.NewIndex].IdDeposito = IdDeposito;
		    }
		}
				
		private DalInsumos.InsPedidoCollection colInsPedidoRecordsFromInsDeposito;
		public DalInsumos.InsPedidoCollection InsPedidoRecordsFromInsDeposito
		{
			get
			{
				if(colInsPedidoRecordsFromInsDeposito == null)
				{
					colInsPedidoRecordsFromInsDeposito = new DalInsumos.InsPedidoCollection().Where(InsPedido.Columns.IdDepositoProveedor, IdDeposito).Load();
					colInsPedidoRecordsFromInsDeposito.ListChanged += new ListChangedEventHandler(colInsPedidoRecordsFromInsDeposito_ListChanged);
				}
				return colInsPedidoRecordsFromInsDeposito;			
			}
			set 
			{ 
					colInsPedidoRecordsFromInsDeposito = value; 
					colInsPedidoRecordsFromInsDeposito.ListChanged += new ListChangedEventHandler(colInsPedidoRecordsFromInsDeposito_ListChanged);
			}
		}
		
		void colInsPedidoRecordsFromInsDeposito_ListChanged(object sender, ListChangedEventArgs e)
		{
		    if (e.ListChangedType == ListChangedType.ItemAdded)
		    {
		        // Set foreign key value
		        colInsPedidoRecordsFromInsDeposito[e.NewIndex].IdDepositoProveedor = IdDeposito;
		    }
		}
				
		private DalInsumos.InsPrescripcionCollection colInsPrescripcionRecords;
		public DalInsumos.InsPrescripcionCollection InsPrescripcionRecords
		{
			get
			{
				if(colInsPrescripcionRecords == null)
				{
					colInsPrescripcionRecords = new DalInsumos.InsPrescripcionCollection().Where(InsPrescripcion.Columns.IdDeposito, IdDeposito).Load();
					colInsPrescripcionRecords.ListChanged += new ListChangedEventHandler(colInsPrescripcionRecords_ListChanged);
				}
				return colInsPrescripcionRecords;			
			}
			set 
			{ 
					colInsPrescripcionRecords = value; 
					colInsPrescripcionRecords.ListChanged += new ListChangedEventHandler(colInsPrescripcionRecords_ListChanged);
			}
		}
		
		void colInsPrescripcionRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
		    if (e.ListChangedType == ListChangedType.ItemAdded)
		    {
		        // Set foreign key value
		        colInsPrescripcionRecords[e.NewIndex].IdDeposito = IdDeposito;
		    }
		}
		
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a SysServicio ActiveRecord object related to this InsDeposito
		/// 
		/// </summary>
		public DalInsumos.SysServicio SysServicio
		{
			get { return DalInsumos.SysServicio.FetchByID(this.IdServicio); }
			set { SetColumnValue("idServicio", value.IdServicio); }
		}
		
		
		/// <summary>
		/// Returns a InsTipoDeposito ActiveRecord object related to this InsDeposito
		/// 
		/// </summary>
		public DalInsumos.InsTipoDeposito InsTipoDeposito
		{
			get { return DalInsumos.InsTipoDeposito.FetchByID(this.IdTipoDeposito); }
			set { SetColumnValue("idTipoDeposito", value.IdTipoDeposito); }
		}
		
		
		/// <summary>
		/// Returns a InsDeposito ActiveRecord object related to this InsDeposito
		/// 
		/// </summary>
		public DalInsumos.InsDeposito ParentInsDeposito
		{
			get { return DalInsumos.InsDeposito.FetchByID(this.IdDepositoSuperior); }
			set { SetColumnValue("idDepositoSuperior", value.IdDeposito); }
		}
		
		
		/// <summary>
		/// Returns a SysEfector ActiveRecord object related to this InsDeposito
		/// 
		/// </summary>
		public DalInsumos.SysEfector SysEfector
		{
			get { return DalInsumos.SysEfector.FetchByID(this.IdEfector); }
			set { SetColumnValue("idEfector", value.IdEfector); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varCodigo,string varNombre,string varDescripcion,string varObservacion,DateTime varFecha,int varIdDepositoSuperior,int varIdEfector,int varIdServicio,int varIdTipoDeposito,bool varBaja,string varCreatedBy,DateTime varCreatedOn,string varModifiedBy,DateTime varModifiedOn,bool varSelected)
		{
			InsDeposito item = new InsDeposito();
			
			item.Codigo = varCodigo;
			
			item.Nombre = varNombre;
			
			item.Descripcion = varDescripcion;
			
			item.Observacion = varObservacion;
			
			item.Fecha = varFecha;
			
			item.IdDepositoSuperior = varIdDepositoSuperior;
			
			item.IdEfector = varIdEfector;
			
			item.IdServicio = varIdServicio;
			
			item.IdTipoDeposito = varIdTipoDeposito;
			
			item.Baja = varBaja;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedBy = varModifiedBy;
			
			item.ModifiedOn = varModifiedOn;
			
			item.Selected = varSelected;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varIdDeposito,int varCodigo,string varNombre,string varDescripcion,string varObservacion,DateTime varFecha,int varIdDepositoSuperior,int varIdEfector,int varIdServicio,int varIdTipoDeposito,bool varBaja,string varCreatedBy,DateTime varCreatedOn,string varModifiedBy,DateTime varModifiedOn,bool varSelected)
		{
			InsDeposito item = new InsDeposito();
			
				item.IdDeposito = varIdDeposito;
			
				item.Codigo = varCodigo;
			
				item.Nombre = varNombre;
			
				item.Descripcion = varDescripcion;
			
				item.Observacion = varObservacion;
			
				item.Fecha = varFecha;
			
				item.IdDepositoSuperior = varIdDepositoSuperior;
			
				item.IdEfector = varIdEfector;
			
				item.IdServicio = varIdServicio;
			
				item.IdTipoDeposito = varIdTipoDeposito;
			
				item.Baja = varBaja;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedBy = varModifiedBy;
			
				item.ModifiedOn = varModifiedOn;
			
				item.Selected = varSelected;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdDepositoColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CodigoColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn NombreColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DescripcionColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ObservacionColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn IdDepositoSuperiorColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn IdEfectorColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn IdServicioColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn IdTipoDepositoColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn BajaColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn SelectedColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdDeposito = @"idDeposito";
			 public static string Codigo = @"codigo";
			 public static string Nombre = @"nombre";
			 public static string Descripcion = @"descripcion";
			 public static string Observacion = @"observacion";
			 public static string Fecha = @"fecha";
			 public static string IdDepositoSuperior = @"idDepositoSuperior";
			 public static string IdEfector = @"idEfector";
			 public static string IdServicio = @"idServicio";
			 public static string IdTipoDeposito = @"idTipoDeposito";
			 public static string Baja = @"baja";
			 public static string CreatedBy = @"CreatedBy";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedBy = @"ModifiedBy";
			 public static string ModifiedOn = @"ModifiedOn";
			 public static string Selected = @"selected";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
                if (colChildInsDepositoRecords != null)
                {
                    foreach (DalInsumos.InsDeposito item in colChildInsDepositoRecords)
                    {
                        if (item.IdDepositoSuperior != IdDeposito)
                        {
                            item.IdDepositoSuperior = IdDeposito;
                        }
                    }
               }
		
                if (colInsDispensacionRecords != null)
                {
                    foreach (DalInsumos.InsDispensacion item in colInsDispensacionRecords)
                    {
                        if (item.IdDeposito == null ||item.IdDeposito != IdDeposito)
                        {
                            item.IdDeposito = IdDeposito;
                        }
                    }
               }
		
                if (colInsPedidoRecords != null)
                {
                    foreach (DalInsumos.InsPedido item in colInsPedidoRecords)
                    {
                        if (item.IdDeposito == null ||item.IdDeposito != IdDeposito)
                        {
                            item.IdDeposito = IdDeposito;
                        }
                    }
               }
		
                if (colInsPedidoRecordsFromInsDeposito != null)
                {
                    foreach (DalInsumos.InsPedido item in colInsPedidoRecordsFromInsDeposito)
                    {
                        if (item.IdDepositoProveedor == null ||item.IdDepositoProveedor != IdDeposito)
                        {
                            item.IdDepositoProveedor = IdDeposito;
                        }
                    }
               }
		
                if (colInsPrescripcionRecords != null)
                {
                    foreach (DalInsumos.InsPrescripcion item in colInsPrescripcionRecords)
                    {
                        if (item.IdDeposito == null ||item.IdDeposito != IdDeposito)
                        {
                            item.IdDeposito = IdDeposito;
                        }
                    }
               }
		}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
                if (colChildInsDepositoRecords != null)
                {
                    colChildInsDepositoRecords.SaveAll();
               }
		
                if (colInsDispensacionRecords != null)
                {
                    colInsDispensacionRecords.SaveAll();
               }
		
                if (colInsPedidoRecords != null)
                {
                    colInsPedidoRecords.SaveAll();
               }
		
                if (colInsPedidoRecordsFromInsDeposito != null)
                {
                    colInsPedidoRecordsFromInsDeposito.SaveAll();
               }
		
                if (colInsPrescripcionRecords != null)
                {
                    colInsPrescripcionRecords.SaveAll();
               }
		}
        #endregion
	}
}
