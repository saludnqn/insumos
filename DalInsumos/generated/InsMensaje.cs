using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DalInsumos
{
	/// <summary>
	/// Strongly-typed collection for the InsMensaje class.
	/// </summary>
    [Serializable]
	public partial class InsMensajeCollection : ActiveList<InsMensaje, InsMensajeCollection>
	{	   
		public InsMensajeCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>InsMensajeCollection</returns>
		public InsMensajeCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                InsMensaje o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the INS_Mensajes table.
	/// </summary>
	[Serializable]
	public partial class InsMensaje : ActiveRecord<InsMensaje>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public InsMensaje()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public InsMensaje(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public InsMensaje(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public InsMensaje(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("INS_Mensajes", TableType.Table, DataService.GetInstance("insProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarIdUsuarioEnvia = new TableSchema.TableColumn(schema);
				colvarIdUsuarioEnvia.ColumnName = "id_usuario_envia";
				colvarIdUsuarioEnvia.DataType = DbType.Int32;
				colvarIdUsuarioEnvia.MaxLength = 0;
				colvarIdUsuarioEnvia.AutoIncrement = false;
				colvarIdUsuarioEnvia.IsNullable = false;
				colvarIdUsuarioEnvia.IsPrimaryKey = false;
				colvarIdUsuarioEnvia.IsForeignKey = false;
				colvarIdUsuarioEnvia.IsReadOnly = false;
				colvarIdUsuarioEnvia.DefaultSetting = @"";
				colvarIdUsuarioEnvia.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdUsuarioEnvia);
				
				TableSchema.TableColumn colvarIdTipoDestino = new TableSchema.TableColumn(schema);
				colvarIdTipoDestino.ColumnName = "id_tipo_destino";
				colvarIdTipoDestino.DataType = DbType.Int32;
				colvarIdTipoDestino.MaxLength = 0;
				colvarIdTipoDestino.AutoIncrement = false;
				colvarIdTipoDestino.IsNullable = false;
				colvarIdTipoDestino.IsPrimaryKey = false;
				colvarIdTipoDestino.IsForeignKey = false;
				colvarIdTipoDestino.IsReadOnly = false;
				colvarIdTipoDestino.DefaultSetting = @"";
				colvarIdTipoDestino.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdTipoDestino);
				
				TableSchema.TableColumn colvarIdDestino = new TableSchema.TableColumn(schema);
				colvarIdDestino.ColumnName = "id_destino";
				colvarIdDestino.DataType = DbType.Int32;
				colvarIdDestino.MaxLength = 0;
				colvarIdDestino.AutoIncrement = false;
				colvarIdDestino.IsNullable = false;
				colvarIdDestino.IsPrimaryKey = false;
				colvarIdDestino.IsForeignKey = false;
				colvarIdDestino.IsReadOnly = false;
				colvarIdDestino.DefaultSetting = @"";
				colvarIdDestino.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdDestino);
				
				TableSchema.TableColumn colvarIdTipoMensaje = new TableSchema.TableColumn(schema);
				colvarIdTipoMensaje.ColumnName = "id_tipo_mensaje";
				colvarIdTipoMensaje.DataType = DbType.Int32;
				colvarIdTipoMensaje.MaxLength = 0;
				colvarIdTipoMensaje.AutoIncrement = false;
				colvarIdTipoMensaje.IsNullable = false;
				colvarIdTipoMensaje.IsPrimaryKey = false;
				colvarIdTipoMensaje.IsForeignKey = true;
				colvarIdTipoMensaje.IsReadOnly = false;
				colvarIdTipoMensaje.DefaultSetting = @"";
				
					colvarIdTipoMensaje.ForeignKeyTableName = "INS_Mensajes_tipos";
				schema.Columns.Add(colvarIdTipoMensaje);
				
				TableSchema.TableColumn colvarMensaje = new TableSchema.TableColumn(schema);
				colvarMensaje.ColumnName = "mensaje";
				colvarMensaje.DataType = DbType.AnsiString;
				colvarMensaje.MaxLength = 500;
				colvarMensaje.AutoIncrement = false;
				colvarMensaje.IsNullable = true;
				colvarMensaje.IsPrimaryKey = false;
				colvarMensaje.IsForeignKey = false;
				colvarMensaje.IsReadOnly = false;
				colvarMensaje.DefaultSetting = @"";
				colvarMensaje.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMensaje);
				
				TableSchema.TableColumn colvarFecha = new TableSchema.TableColumn(schema);
				colvarFecha.ColumnName = "fecha";
				colvarFecha.DataType = DbType.DateTime;
				colvarFecha.MaxLength = 0;
				colvarFecha.AutoIncrement = false;
				colvarFecha.IsNullable = false;
				colvarFecha.IsPrimaryKey = false;
				colvarFecha.IsForeignKey = false;
				colvarFecha.IsReadOnly = false;
				colvarFecha.DefaultSetting = @"";
				colvarFecha.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFecha);
				
				TableSchema.TableColumn colvarFechaLectura = new TableSchema.TableColumn(schema);
				colvarFechaLectura.ColumnName = "fecha_lectura";
				colvarFechaLectura.DataType = DbType.DateTime;
				colvarFechaLectura.MaxLength = 0;
				colvarFechaLectura.AutoIncrement = false;
				colvarFechaLectura.IsNullable = true;
				colvarFechaLectura.IsPrimaryKey = false;
				colvarFechaLectura.IsForeignKey = false;
				colvarFechaLectura.IsReadOnly = false;
				colvarFechaLectura.DefaultSetting = @"";
				colvarFechaLectura.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFechaLectura);
				
				TableSchema.TableColumn colvarIdUsuarioLectura = new TableSchema.TableColumn(schema);
				colvarIdUsuarioLectura.ColumnName = "id_usuario_lectura";
				colvarIdUsuarioLectura.DataType = DbType.String;
				colvarIdUsuarioLectura.MaxLength = 10;
				colvarIdUsuarioLectura.AutoIncrement = false;
				colvarIdUsuarioLectura.IsNullable = true;
				colvarIdUsuarioLectura.IsPrimaryKey = false;
				colvarIdUsuarioLectura.IsForeignKey = false;
				colvarIdUsuarioLectura.IsReadOnly = false;
				colvarIdUsuarioLectura.DefaultSetting = @"";
				colvarIdUsuarioLectura.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdUsuarioLectura);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["insProvider"].AddSchema("INS_Mensajes",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("IdUsuarioEnvia")]
		[Bindable(true)]
		public int IdUsuarioEnvia 
		{
			get { return GetColumnValue<int>(Columns.IdUsuarioEnvia); }
			set { SetColumnValue(Columns.IdUsuarioEnvia, value); }
		}
		  
		[XmlAttribute("IdTipoDestino")]
		[Bindable(true)]
		public int IdTipoDestino 
		{
			get { return GetColumnValue<int>(Columns.IdTipoDestino); }
			set { SetColumnValue(Columns.IdTipoDestino, value); }
		}
		  
		[XmlAttribute("IdDestino")]
		[Bindable(true)]
		public int IdDestino 
		{
			get { return GetColumnValue<int>(Columns.IdDestino); }
			set { SetColumnValue(Columns.IdDestino, value); }
		}
		  
		[XmlAttribute("IdTipoMensaje")]
		[Bindable(true)]
		public int IdTipoMensaje 
		{
			get { return GetColumnValue<int>(Columns.IdTipoMensaje); }
			set { SetColumnValue(Columns.IdTipoMensaje, value); }
		}
		  
		[XmlAttribute("Mensaje")]
		[Bindable(true)]
		public string Mensaje 
		{
			get { return GetColumnValue<string>(Columns.Mensaje); }
			set { SetColumnValue(Columns.Mensaje, value); }
		}
		  
		[XmlAttribute("Fecha")]
		[Bindable(true)]
		public DateTime Fecha 
		{
			get { return GetColumnValue<DateTime>(Columns.Fecha); }
			set { SetColumnValue(Columns.Fecha, value); }
		}
		  
		[XmlAttribute("FechaLectura")]
		[Bindable(true)]
		public DateTime? FechaLectura 
		{
			get { return GetColumnValue<DateTime?>(Columns.FechaLectura); }
			set { SetColumnValue(Columns.FechaLectura, value); }
		}
		  
		[XmlAttribute("IdUsuarioLectura")]
		[Bindable(true)]
		public string IdUsuarioLectura 
		{
			get { return GetColumnValue<string>(Columns.IdUsuarioLectura); }
			set { SetColumnValue(Columns.IdUsuarioLectura, value); }
		}
		
		#endregion
		
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a InsMensajesTipo ActiveRecord object related to this InsMensaje
		/// 
		/// </summary>
		public DalInsumos.InsMensajesTipo InsMensajesTipo
		{
			get { return DalInsumos.InsMensajesTipo.FetchByID(this.IdTipoMensaje); }
			set { SetColumnValue("id_tipo_mensaje", value.Id); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varIdUsuarioEnvia,int varIdTipoDestino,int varIdDestino,int varIdTipoMensaje,string varMensaje,DateTime varFecha,DateTime? varFechaLectura,string varIdUsuarioLectura)
		{
			InsMensaje item = new InsMensaje();
			
			item.IdUsuarioEnvia = varIdUsuarioEnvia;
			
			item.IdTipoDestino = varIdTipoDestino;
			
			item.IdDestino = varIdDestino;
			
			item.IdTipoMensaje = varIdTipoMensaje;
			
			item.Mensaje = varMensaje;
			
			item.Fecha = varFecha;
			
			item.FechaLectura = varFechaLectura;
			
			item.IdUsuarioLectura = varIdUsuarioLectura;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int varIdUsuarioEnvia,int varIdTipoDestino,int varIdDestino,int varIdTipoMensaje,string varMensaje,DateTime varFecha,DateTime? varFechaLectura,string varIdUsuarioLectura)
		{
			InsMensaje item = new InsMensaje();
			
				item.Id = varId;
			
				item.IdUsuarioEnvia = varIdUsuarioEnvia;
			
				item.IdTipoDestino = varIdTipoDestino;
			
				item.IdDestino = varIdDestino;
			
				item.IdTipoMensaje = varIdTipoMensaje;
			
				item.Mensaje = varMensaje;
			
				item.Fecha = varFecha;
			
				item.FechaLectura = varFechaLectura;
			
				item.IdUsuarioLectura = varIdUsuarioLectura;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn IdUsuarioEnviaColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn IdTipoDestinoColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn IdDestinoColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IdTipoMensajeColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn MensajeColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaLecturaColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn IdUsuarioLecturaColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"id";
			 public static string IdUsuarioEnvia = @"id_usuario_envia";
			 public static string IdTipoDestino = @"id_tipo_destino";
			 public static string IdDestino = @"id_destino";
			 public static string IdTipoMensaje = @"id_tipo_mensaje";
			 public static string Mensaje = @"mensaje";
			 public static string Fecha = @"fecha";
			 public static string FechaLectura = @"fecha_lectura";
			 public static string IdUsuarioLectura = @"id_usuario_lectura";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
