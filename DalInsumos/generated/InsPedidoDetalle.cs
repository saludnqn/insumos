using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DalInsumos
{
	/// <summary>
	/// Strongly-typed collection for the InsPedidoDetalle class.
	/// </summary>
    [Serializable]
	public partial class InsPedidoDetalleCollection : ActiveList<InsPedidoDetalle, InsPedidoDetalleCollection>
	{	   
		public InsPedidoDetalleCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>InsPedidoDetalleCollection</returns>
		public InsPedidoDetalleCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                InsPedidoDetalle o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the INS_PedidoDetalle table.
	/// </summary>
	[Serializable]
	public partial class InsPedidoDetalle : ActiveRecord<InsPedidoDetalle>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public InsPedidoDetalle()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public InsPedidoDetalle(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public InsPedidoDetalle(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public InsPedidoDetalle(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("INS_PedidoDetalle", TableType.Table, DataService.GetInstance("insProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdPedidoDetalle = new TableSchema.TableColumn(schema);
				colvarIdPedidoDetalle.ColumnName = "idPedidoDetalle";
				colvarIdPedidoDetalle.DataType = DbType.Int32;
				colvarIdPedidoDetalle.MaxLength = 0;
				colvarIdPedidoDetalle.AutoIncrement = true;
				colvarIdPedidoDetalle.IsNullable = false;
				colvarIdPedidoDetalle.IsPrimaryKey = true;
				colvarIdPedidoDetalle.IsForeignKey = false;
				colvarIdPedidoDetalle.IsReadOnly = false;
				colvarIdPedidoDetalle.DefaultSetting = @"";
				colvarIdPedidoDetalle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdPedidoDetalle);
				
				TableSchema.TableColumn colvarIdPedido = new TableSchema.TableColumn(schema);
				colvarIdPedido.ColumnName = "idPedido";
				colvarIdPedido.DataType = DbType.Int32;
				colvarIdPedido.MaxLength = 0;
				colvarIdPedido.AutoIncrement = false;
				colvarIdPedido.IsNullable = false;
				colvarIdPedido.IsPrimaryKey = false;
				colvarIdPedido.IsForeignKey = true;
				colvarIdPedido.IsReadOnly = false;
				
						colvarIdPedido.DefaultSetting = @"((0))";
				
					colvarIdPedido.ForeignKeyTableName = "INS_Pedido";
				schema.Columns.Add(colvarIdPedido);
				
				TableSchema.TableColumn colvarIdInsumo = new TableSchema.TableColumn(schema);
				colvarIdInsumo.ColumnName = "idInsumo";
				colvarIdInsumo.DataType = DbType.Int32;
				colvarIdInsumo.MaxLength = 0;
				colvarIdInsumo.AutoIncrement = false;
				colvarIdInsumo.IsNullable = false;
				colvarIdInsumo.IsPrimaryKey = false;
				colvarIdInsumo.IsForeignKey = true;
				colvarIdInsumo.IsReadOnly = false;
				
						colvarIdInsumo.DefaultSetting = @"((0))";
				
					colvarIdInsumo.ForeignKeyTableName = "INS_Insumo";
				schema.Columns.Add(colvarIdInsumo);
				
				TableSchema.TableColumn colvarFechaPedido = new TableSchema.TableColumn(schema);
				colvarFechaPedido.ColumnName = "fechaPedido";
				colvarFechaPedido.DataType = DbType.DateTime;
				colvarFechaPedido.MaxLength = 0;
				colvarFechaPedido.AutoIncrement = false;
				colvarFechaPedido.IsNullable = false;
				colvarFechaPedido.IsPrimaryKey = false;
				colvarFechaPedido.IsForeignKey = false;
				colvarFechaPedido.IsReadOnly = false;
				
						colvarFechaPedido.DefaultSetting = @"(((1)/(1))/(1900))";
				colvarFechaPedido.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFechaPedido);
				
				TableSchema.TableColumn colvarCantidad = new TableSchema.TableColumn(schema);
				colvarCantidad.ColumnName = "cantidad";
				colvarCantidad.DataType = DbType.Int32;
				colvarCantidad.MaxLength = 0;
				colvarCantidad.AutoIncrement = false;
				colvarCantidad.IsNullable = false;
				colvarCantidad.IsPrimaryKey = false;
				colvarCantidad.IsForeignKey = false;
				colvarCantidad.IsReadOnly = false;
				
						colvarCantidad.DefaultSetting = @"((0))";
				colvarCantidad.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCantidad);
				
				TableSchema.TableColumn colvarPresentacion = new TableSchema.TableColumn(schema);
				colvarPresentacion.ColumnName = "presentacion";
				colvarPresentacion.DataType = DbType.Int32;
				colvarPresentacion.MaxLength = 0;
				colvarPresentacion.AutoIncrement = false;
				colvarPresentacion.IsNullable = false;
				colvarPresentacion.IsPrimaryKey = false;
				colvarPresentacion.IsForeignKey = false;
				colvarPresentacion.IsReadOnly = false;
				
						colvarPresentacion.DefaultSetting = @"((0))";
				colvarPresentacion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPresentacion);
				
				TableSchema.TableColumn colvarCantidadSolicitada = new TableSchema.TableColumn(schema);
				colvarCantidadSolicitada.ColumnName = "cantidadSolicitada";
				colvarCantidadSolicitada.DataType = DbType.Int32;
				colvarCantidadSolicitada.MaxLength = 0;
				colvarCantidadSolicitada.AutoIncrement = false;
				colvarCantidadSolicitada.IsNullable = false;
				colvarCantidadSolicitada.IsPrimaryKey = false;
				colvarCantidadSolicitada.IsForeignKey = false;
				colvarCantidadSolicitada.IsReadOnly = false;
				
						colvarCantidadSolicitada.DefaultSetting = @"((0))";
				colvarCantidadSolicitada.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCantidadSolicitada);
				
				TableSchema.TableColumn colvarCantidadAutorizada = new TableSchema.TableColumn(schema);
				colvarCantidadAutorizada.ColumnName = "cantidadAutorizada";
				colvarCantidadAutorizada.DataType = DbType.Int32;
				colvarCantidadAutorizada.MaxLength = 0;
				colvarCantidadAutorizada.AutoIncrement = false;
				colvarCantidadAutorizada.IsNullable = false;
				colvarCantidadAutorizada.IsPrimaryKey = false;
				colvarCantidadAutorizada.IsForeignKey = false;
				colvarCantidadAutorizada.IsReadOnly = false;
				
						colvarCantidadAutorizada.DefaultSetting = @"((0))";
				colvarCantidadAutorizada.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCantidadAutorizada);
				
				TableSchema.TableColumn colvarCantidadEmitida = new TableSchema.TableColumn(schema);
				colvarCantidadEmitida.ColumnName = "cantidadEmitida";
				colvarCantidadEmitida.DataType = DbType.Int32;
				colvarCantidadEmitida.MaxLength = 0;
				colvarCantidadEmitida.AutoIncrement = false;
				colvarCantidadEmitida.IsNullable = false;
				colvarCantidadEmitida.IsPrimaryKey = false;
				colvarCantidadEmitida.IsForeignKey = false;
				colvarCantidadEmitida.IsReadOnly = false;
				
						colvarCantidadEmitida.DefaultSetting = @"((0))";
				colvarCantidadEmitida.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCantidadEmitida);
				
				TableSchema.TableColumn colvarCantidadRecibida = new TableSchema.TableColumn(schema);
				colvarCantidadRecibida.ColumnName = "cantidadRecibida";
				colvarCantidadRecibida.DataType = DbType.Int32;
				colvarCantidadRecibida.MaxLength = 0;
				colvarCantidadRecibida.AutoIncrement = false;
				colvarCantidadRecibida.IsNullable = false;
				colvarCantidadRecibida.IsPrimaryKey = false;
				colvarCantidadRecibida.IsForeignKey = false;
				colvarCantidadRecibida.IsReadOnly = false;
				
						colvarCantidadRecibida.DefaultSetting = @"((0))";
				colvarCantidadRecibida.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCantidadRecibida);
				
				TableSchema.TableColumn colvarStock = new TableSchema.TableColumn(schema);
				colvarStock.ColumnName = "stock";
				colvarStock.DataType = DbType.Int32;
				colvarStock.MaxLength = 0;
				colvarStock.AutoIncrement = false;
				colvarStock.IsNullable = false;
				colvarStock.IsPrimaryKey = false;
				colvarStock.IsForeignKey = false;
				colvarStock.IsReadOnly = false;
				colvarStock.DefaultSetting = @"";
				colvarStock.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStock);
				
				TableSchema.TableColumn colvarPrecioUnitario = new TableSchema.TableColumn(schema);
				colvarPrecioUnitario.ColumnName = "precioUnitario";
				colvarPrecioUnitario.DataType = DbType.Decimal;
				colvarPrecioUnitario.MaxLength = 0;
				colvarPrecioUnitario.AutoIncrement = false;
				colvarPrecioUnitario.IsNullable = false;
				colvarPrecioUnitario.IsPrimaryKey = false;
				colvarPrecioUnitario.IsForeignKey = false;
				colvarPrecioUnitario.IsReadOnly = false;
				colvarPrecioUnitario.DefaultSetting = @"";
				colvarPrecioUnitario.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrecioUnitario);
				
				TableSchema.TableColumn colvarObservacion = new TableSchema.TableColumn(schema);
				colvarObservacion.ColumnName = "observacion";
				colvarObservacion.DataType = DbType.AnsiString;
				colvarObservacion.MaxLength = 500;
				colvarObservacion.AutoIncrement = false;
				colvarObservacion.IsNullable = false;
				colvarObservacion.IsPrimaryKey = false;
				colvarObservacion.IsForeignKey = false;
				colvarObservacion.IsReadOnly = false;
				
						colvarObservacion.DefaultSetting = @"('')";
				colvarObservacion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarObservacion);
				
				TableSchema.TableColumn colvarRenglonOC = new TableSchema.TableColumn(schema);
				colvarRenglonOC.ColumnName = "renglonOC";
				colvarRenglonOC.DataType = DbType.Int32;
				colvarRenglonOC.MaxLength = 0;
				colvarRenglonOC.AutoIncrement = false;
				colvarRenglonOC.IsNullable = false;
				colvarRenglonOC.IsPrimaryKey = false;
				colvarRenglonOC.IsForeignKey = false;
				colvarRenglonOC.IsReadOnly = false;
				
						colvarRenglonOC.DefaultSetting = @"((0))";
				colvarRenglonOC.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRenglonOC);
				
				TableSchema.TableColumn colvarRenglon = new TableSchema.TableColumn(schema);
				colvarRenglon.ColumnName = "renglon";
				colvarRenglon.DataType = DbType.Int32;
				colvarRenglon.MaxLength = 0;
				colvarRenglon.AutoIncrement = false;
				colvarRenglon.IsNullable = false;
				colvarRenglon.IsPrimaryKey = false;
				colvarRenglon.IsForeignKey = false;
				colvarRenglon.IsReadOnly = false;
				
						colvarRenglon.DefaultSetting = @"((0))";
				colvarRenglon.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRenglon);
				
				TableSchema.TableColumn colvarNumeroLote = new TableSchema.TableColumn(schema);
				colvarNumeroLote.ColumnName = "numeroLote";
				colvarNumeroLote.DataType = DbType.AnsiString;
				colvarNumeroLote.MaxLength = 50;
				colvarNumeroLote.AutoIncrement = false;
				colvarNumeroLote.IsNullable = false;
				colvarNumeroLote.IsPrimaryKey = false;
				colvarNumeroLote.IsForeignKey = false;
				colvarNumeroLote.IsReadOnly = false;
				
						colvarNumeroLote.DefaultSetting = @"('')";
				colvarNumeroLote.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNumeroLote);
				
				TableSchema.TableColumn colvarFechaVencimiento = new TableSchema.TableColumn(schema);
				colvarFechaVencimiento.ColumnName = "fechaVencimiento";
				colvarFechaVencimiento.DataType = DbType.DateTime;
				colvarFechaVencimiento.MaxLength = 0;
				colvarFechaVencimiento.AutoIncrement = false;
				colvarFechaVencimiento.IsNullable = false;
				colvarFechaVencimiento.IsPrimaryKey = false;
				colvarFechaVencimiento.IsForeignKey = false;
				colvarFechaVencimiento.IsReadOnly = false;
				
						colvarFechaVencimiento.DefaultSetting = @"(((1)/(1))/(1900))";
				colvarFechaVencimiento.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFechaVencimiento);
				
				TableSchema.TableColumn colvarBaja = new TableSchema.TableColumn(schema);
				colvarBaja.ColumnName = "baja";
				colvarBaja.DataType = DbType.Boolean;
				colvarBaja.MaxLength = 0;
				colvarBaja.AutoIncrement = false;
				colvarBaja.IsNullable = false;
				colvarBaja.IsPrimaryKey = false;
				colvarBaja.IsForeignKey = false;
				colvarBaja.IsReadOnly = false;
				
						colvarBaja.DefaultSetting = @"((0))";
				colvarBaja.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBaja);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				
						colvarCreatedBy.DefaultSetting = @"('')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarCreatedOn = new TableSchema.TableColumn(schema);
				colvarCreatedOn.ColumnName = "CreatedOn";
				colvarCreatedOn.DataType = DbType.DateTime;
				colvarCreatedOn.MaxLength = 0;
				colvarCreatedOn.AutoIncrement = false;
				colvarCreatedOn.IsNullable = false;
				colvarCreatedOn.IsPrimaryKey = false;
				colvarCreatedOn.IsForeignKey = false;
				colvarCreatedOn.IsReadOnly = false;
				
						colvarCreatedOn.DefaultSetting = @"(((1)/(1))/(1900))";
				colvarCreatedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedOn);
				
				TableSchema.TableColumn colvarModifiedBy = new TableSchema.TableColumn(schema);
				colvarModifiedBy.ColumnName = "ModifiedBy";
				colvarModifiedBy.DataType = DbType.AnsiString;
				colvarModifiedBy.MaxLength = 50;
				colvarModifiedBy.AutoIncrement = false;
				colvarModifiedBy.IsNullable = false;
				colvarModifiedBy.IsPrimaryKey = false;
				colvarModifiedBy.IsForeignKey = false;
				colvarModifiedBy.IsReadOnly = false;
				
						colvarModifiedBy.DefaultSetting = @"('')";
				colvarModifiedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedBy);
				
				TableSchema.TableColumn colvarModifiedOn = new TableSchema.TableColumn(schema);
				colvarModifiedOn.ColumnName = "ModifiedOn";
				colvarModifiedOn.DataType = DbType.DateTime;
				colvarModifiedOn.MaxLength = 0;
				colvarModifiedOn.AutoIncrement = false;
				colvarModifiedOn.IsNullable = false;
				colvarModifiedOn.IsPrimaryKey = false;
				colvarModifiedOn.IsForeignKey = false;
				colvarModifiedOn.IsReadOnly = false;
				
						colvarModifiedOn.DefaultSetting = @"(((1)/(1))/(1900))";
				colvarModifiedOn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarModifiedOn);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["insProvider"].AddSchema("INS_PedidoDetalle",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdPedidoDetalle")]
		[Bindable(true)]
		public int IdPedidoDetalle 
		{
			get { return GetColumnValue<int>(Columns.IdPedidoDetalle); }
			set { SetColumnValue(Columns.IdPedidoDetalle, value); }
		}
		  
		[XmlAttribute("IdPedido")]
		[Bindable(true)]
		public int IdPedido 
		{
			get { return GetColumnValue<int>(Columns.IdPedido); }
			set { SetColumnValue(Columns.IdPedido, value); }
		}
		  
		[XmlAttribute("IdInsumo")]
		[Bindable(true)]
		public int IdInsumo 
		{
			get { return GetColumnValue<int>(Columns.IdInsumo); }
			set { SetColumnValue(Columns.IdInsumo, value); }
		}
		  
		[XmlAttribute("FechaPedido")]
		[Bindable(true)]
		public DateTime FechaPedido 
		{
			get { return GetColumnValue<DateTime>(Columns.FechaPedido); }
			set { SetColumnValue(Columns.FechaPedido, value); }
		}
		  
		[XmlAttribute("Cantidad")]
		[Bindable(true)]
		public int Cantidad 
		{
			get { return GetColumnValue<int>(Columns.Cantidad); }
			set { SetColumnValue(Columns.Cantidad, value); }
		}
		  
		[XmlAttribute("Presentacion")]
		[Bindable(true)]
		public int Presentacion 
		{
			get { return GetColumnValue<int>(Columns.Presentacion); }
			set { SetColumnValue(Columns.Presentacion, value); }
		}
		  
		[XmlAttribute("CantidadSolicitada")]
		[Bindable(true)]
		public int CantidadSolicitada 
		{
			get { return GetColumnValue<int>(Columns.CantidadSolicitada); }
			set { SetColumnValue(Columns.CantidadSolicitada, value); }
		}
		  
		[XmlAttribute("CantidadAutorizada")]
		[Bindable(true)]
		public int CantidadAutorizada 
		{
			get { return GetColumnValue<int>(Columns.CantidadAutorizada); }
			set { SetColumnValue(Columns.CantidadAutorizada, value); }
		}
		  
		[XmlAttribute("CantidadEmitida")]
		[Bindable(true)]
		public int CantidadEmitida 
		{
			get { return GetColumnValue<int>(Columns.CantidadEmitida); }
			set { SetColumnValue(Columns.CantidadEmitida, value); }
		}
		  
		[XmlAttribute("CantidadRecibida")]
		[Bindable(true)]
		public int CantidadRecibida 
		{
			get { return GetColumnValue<int>(Columns.CantidadRecibida); }
			set { SetColumnValue(Columns.CantidadRecibida, value); }
		}
		  
		[XmlAttribute("Stock")]
		[Bindable(true)]
		public int Stock 
		{
			get { return GetColumnValue<int>(Columns.Stock); }
			set { SetColumnValue(Columns.Stock, value); }
		}
		  
		[XmlAttribute("PrecioUnitario")]
		[Bindable(true)]
		public decimal PrecioUnitario 
		{
			get { return GetColumnValue<decimal>(Columns.PrecioUnitario); }
			set { SetColumnValue(Columns.PrecioUnitario, value); }
		}
		  
		[XmlAttribute("Observacion")]
		[Bindable(true)]
		public string Observacion 
		{
			get { return GetColumnValue<string>(Columns.Observacion); }
			set { SetColumnValue(Columns.Observacion, value); }
		}
		  
		[XmlAttribute("RenglonOC")]
		[Bindable(true)]
		public int RenglonOC 
		{
			get { return GetColumnValue<int>(Columns.RenglonOC); }
			set { SetColumnValue(Columns.RenglonOC, value); }
		}
		  
		[XmlAttribute("Renglon")]
		[Bindable(true)]
		public int Renglon 
		{
			get { return GetColumnValue<int>(Columns.Renglon); }
			set { SetColumnValue(Columns.Renglon, value); }
		}
		  
		[XmlAttribute("NumeroLote")]
		[Bindable(true)]
		public string NumeroLote 
		{
			get { return GetColumnValue<string>(Columns.NumeroLote); }
			set { SetColumnValue(Columns.NumeroLote, value); }
		}
		  
		[XmlAttribute("FechaVencimiento")]
		[Bindable(true)]
		public DateTime FechaVencimiento 
		{
			get { return GetColumnValue<DateTime>(Columns.FechaVencimiento); }
			set { SetColumnValue(Columns.FechaVencimiento, value); }
		}
		  
		[XmlAttribute("Baja")]
		[Bindable(true)]
		public bool Baja 
		{
			get { return GetColumnValue<bool>(Columns.Baja); }
			set { SetColumnValue(Columns.Baja, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreatedOn")]
		[Bindable(true)]
		public DateTime CreatedOn 
		{
			get { return GetColumnValue<DateTime>(Columns.CreatedOn); }
			set { SetColumnValue(Columns.CreatedOn, value); }
		}
		  
		[XmlAttribute("ModifiedBy")]
		[Bindable(true)]
		public string ModifiedBy 
		{
			get { return GetColumnValue<string>(Columns.ModifiedBy); }
			set { SetColumnValue(Columns.ModifiedBy, value); }
		}
		  
		[XmlAttribute("ModifiedOn")]
		[Bindable(true)]
		public DateTime ModifiedOn 
		{
			get { return GetColumnValue<DateTime>(Columns.ModifiedOn); }
			set { SetColumnValue(Columns.ModifiedOn, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
				
		private DalInsumos.InsDispensacionEntregaCollection colInsDispensacionEntregaRecords;
		public DalInsumos.InsDispensacionEntregaCollection InsDispensacionEntregaRecords
		{
			get
			{
				if(colInsDispensacionEntregaRecords == null)
				{
					colInsDispensacionEntregaRecords = new DalInsumos.InsDispensacionEntregaCollection().Where(InsDispensacionEntrega.Columns.IdPedidoDetalle, IdPedidoDetalle).Load();
					colInsDispensacionEntregaRecords.ListChanged += new ListChangedEventHandler(colInsDispensacionEntregaRecords_ListChanged);
				}
				return colInsDispensacionEntregaRecords;			
			}
			set 
			{ 
					colInsDispensacionEntregaRecords = value; 
					colInsDispensacionEntregaRecords.ListChanged += new ListChangedEventHandler(colInsDispensacionEntregaRecords_ListChanged);
			}
		}
		
		void colInsDispensacionEntregaRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
		    if (e.ListChangedType == ListChangedType.ItemAdded)
		    {
		        // Set foreign key value
		        colInsDispensacionEntregaRecords[e.NewIndex].IdPedidoDetalle = IdPedidoDetalle;
		    }
		}
				
		private DalInsumos.InsPrescripcionEntregaCollection colInsPrescripcionEntregaRecords;
		public DalInsumos.InsPrescripcionEntregaCollection InsPrescripcionEntregaRecords
		{
			get
			{
				if(colInsPrescripcionEntregaRecords == null)
				{
					colInsPrescripcionEntregaRecords = new DalInsumos.InsPrescripcionEntregaCollection().Where(InsPrescripcionEntrega.Columns.IdPedidoDetalle, IdPedidoDetalle).Load();
					colInsPrescripcionEntregaRecords.ListChanged += new ListChangedEventHandler(colInsPrescripcionEntregaRecords_ListChanged);
				}
				return colInsPrescripcionEntregaRecords;			
			}
			set 
			{ 
					colInsPrescripcionEntregaRecords = value; 
					colInsPrescripcionEntregaRecords.ListChanged += new ListChangedEventHandler(colInsPrescripcionEntregaRecords_ListChanged);
			}
		}
		
		void colInsPrescripcionEntregaRecords_ListChanged(object sender, ListChangedEventArgs e)
		{
		    if (e.ListChangedType == ListChangedType.ItemAdded)
		    {
		        // Set foreign key value
		        colInsPrescripcionEntregaRecords[e.NewIndex].IdPedidoDetalle = IdPedidoDetalle;
		    }
		}
		
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a InsInsumo ActiveRecord object related to this InsPedidoDetalle
		/// 
		/// </summary>
		public DalInsumos.InsInsumo InsInsumo
		{
			get { return DalInsumos.InsInsumo.FetchByID(this.IdInsumo); }
			set { SetColumnValue("idInsumo", value.Codigo); }
		}
		
		
		/// <summary>
		/// Returns a InsPedido ActiveRecord object related to this InsPedidoDetalle
		/// 
		/// </summary>
		public DalInsumos.InsPedido InsPedido
		{
			get { return DalInsumos.InsPedido.FetchByID(this.IdPedido); }
			set { SetColumnValue("idPedido", value.IdPedido); }
		}
		
		
		#endregion
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varIdPedido,int varIdInsumo,DateTime varFechaPedido,int varCantidad,int varPresentacion,int varCantidadSolicitada,int varCantidadAutorizada,int varCantidadEmitida,int varCantidadRecibida,int varStock,decimal varPrecioUnitario,string varObservacion,int varRenglonOC,int varRenglon,string varNumeroLote,DateTime varFechaVencimiento,bool varBaja,string varCreatedBy,DateTime varCreatedOn,string varModifiedBy,DateTime varModifiedOn)
		{
			InsPedidoDetalle item = new InsPedidoDetalle();
			
			item.IdPedido = varIdPedido;
			
			item.IdInsumo = varIdInsumo;
			
			item.FechaPedido = varFechaPedido;
			
			item.Cantidad = varCantidad;
			
			item.Presentacion = varPresentacion;
			
			item.CantidadSolicitada = varCantidadSolicitada;
			
			item.CantidadAutorizada = varCantidadAutorizada;
			
			item.CantidadEmitida = varCantidadEmitida;
			
			item.CantidadRecibida = varCantidadRecibida;
			
			item.Stock = varStock;
			
			item.PrecioUnitario = varPrecioUnitario;
			
			item.Observacion = varObservacion;
			
			item.RenglonOC = varRenglonOC;
			
			item.Renglon = varRenglon;
			
			item.NumeroLote = varNumeroLote;
			
			item.FechaVencimiento = varFechaVencimiento;
			
			item.Baja = varBaja;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreatedOn = varCreatedOn;
			
			item.ModifiedBy = varModifiedBy;
			
			item.ModifiedOn = varModifiedOn;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varIdPedidoDetalle,int varIdPedido,int varIdInsumo,DateTime varFechaPedido,int varCantidad,int varPresentacion,int varCantidadSolicitada,int varCantidadAutorizada,int varCantidadEmitida,int varCantidadRecibida,int varStock,decimal varPrecioUnitario,string varObservacion,int varRenglonOC,int varRenglon,string varNumeroLote,DateTime varFechaVencimiento,bool varBaja,string varCreatedBy,DateTime varCreatedOn,string varModifiedBy,DateTime varModifiedOn)
		{
			InsPedidoDetalle item = new InsPedidoDetalle();
			
				item.IdPedidoDetalle = varIdPedidoDetalle;
			
				item.IdPedido = varIdPedido;
			
				item.IdInsumo = varIdInsumo;
			
				item.FechaPedido = varFechaPedido;
			
				item.Cantidad = varCantidad;
			
				item.Presentacion = varPresentacion;
			
				item.CantidadSolicitada = varCantidadSolicitada;
			
				item.CantidadAutorizada = varCantidadAutorizada;
			
				item.CantidadEmitida = varCantidadEmitida;
			
				item.CantidadRecibida = varCantidadRecibida;
			
				item.Stock = varStock;
			
				item.PrecioUnitario = varPrecioUnitario;
			
				item.Observacion = varObservacion;
			
				item.RenglonOC = varRenglonOC;
			
				item.Renglon = varRenglon;
			
				item.NumeroLote = varNumeroLote;
			
				item.FechaVencimiento = varFechaVencimiento;
			
				item.Baja = varBaja;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreatedOn = varCreatedOn;
			
				item.ModifiedBy = varModifiedBy;
			
				item.ModifiedOn = varModifiedOn;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdPedidoDetalleColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn IdPedidoColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn IdInsumoColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaPedidoColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CantidadColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn PresentacionColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn CantidadSolicitadaColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CantidadAutorizadaColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn CantidadEmitidaColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn CantidadRecibidaColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn StockColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn PrecioUnitarioColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn ObservacionColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn RenglonOCColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn RenglonColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn NumeroLoteColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn FechaVencimientoColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn BajaColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedOnColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedByColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn ModifiedOnColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdPedidoDetalle = @"idPedidoDetalle";
			 public static string IdPedido = @"idPedido";
			 public static string IdInsumo = @"idInsumo";
			 public static string FechaPedido = @"fechaPedido";
			 public static string Cantidad = @"cantidad";
			 public static string Presentacion = @"presentacion";
			 public static string CantidadSolicitada = @"cantidadSolicitada";
			 public static string CantidadAutorizada = @"cantidadAutorizada";
			 public static string CantidadEmitida = @"cantidadEmitida";
			 public static string CantidadRecibida = @"cantidadRecibida";
			 public static string Stock = @"stock";
			 public static string PrecioUnitario = @"precioUnitario";
			 public static string Observacion = @"observacion";
			 public static string RenglonOC = @"renglonOC";
			 public static string Renglon = @"renglon";
			 public static string NumeroLote = @"numeroLote";
			 public static string FechaVencimiento = @"fechaVencimiento";
			 public static string Baja = @"baja";
			 public static string CreatedBy = @"CreatedBy";
			 public static string CreatedOn = @"CreatedOn";
			 public static string ModifiedBy = @"ModifiedBy";
			 public static string ModifiedOn = @"ModifiedOn";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
                if (colInsDispensacionEntregaRecords != null)
                {
                    foreach (DalInsumos.InsDispensacionEntrega item in colInsDispensacionEntregaRecords)
                    {
                        if (item.IdPedidoDetalle != IdPedidoDetalle)
                        {
                            item.IdPedidoDetalle = IdPedidoDetalle;
                        }
                    }
               }
		
                if (colInsPrescripcionEntregaRecords != null)
                {
                    foreach (DalInsumos.InsPrescripcionEntrega item in colInsPrescripcionEntregaRecords)
                    {
                        if (item.IdPedidoDetalle != IdPedidoDetalle)
                        {
                            item.IdPedidoDetalle = IdPedidoDetalle;
                        }
                    }
               }
		}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
                if (colInsDispensacionEntregaRecords != null)
                {
                    colInsDispensacionEntregaRecords.SaveAll();
               }
		
                if (colInsPrescripcionEntregaRecords != null)
                {
                    colInsPrescripcionEntregaRecords.SaveAll();
               }
		}
        #endregion
	}
}
