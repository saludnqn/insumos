using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DalInsumos
{
	/// <summary>
	/// Strongly-typed collection for the InsDepositoZona class.
	/// </summary>
    [Serializable]
	public partial class InsDepositoZonaCollection : ActiveList<InsDepositoZona, InsDepositoZonaCollection>
	{	   
		public InsDepositoZonaCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>InsDepositoZonaCollection</returns>
		public InsDepositoZonaCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                InsDepositoZona o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the INS_DepositoZona table.
	/// </summary>
	[Serializable]
	public partial class InsDepositoZona : ActiveRecord<InsDepositoZona>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public InsDepositoZona()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public InsDepositoZona(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public InsDepositoZona(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public InsDepositoZona(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("INS_DepositoZona", TableType.Table, DataService.GetInstance("insProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdDepositoZona = new TableSchema.TableColumn(schema);
				colvarIdDepositoZona.ColumnName = "idDepositoZona";
				colvarIdDepositoZona.DataType = DbType.Int32;
				colvarIdDepositoZona.MaxLength = 0;
				colvarIdDepositoZona.AutoIncrement = false;
				colvarIdDepositoZona.IsNullable = false;
				colvarIdDepositoZona.IsPrimaryKey = true;
				colvarIdDepositoZona.IsForeignKey = false;
				colvarIdDepositoZona.IsReadOnly = false;
				colvarIdDepositoZona.DefaultSetting = @"";
				colvarIdDepositoZona.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdDepositoZona);
				
				TableSchema.TableColumn colvarIdEfector = new TableSchema.TableColumn(schema);
				colvarIdEfector.ColumnName = "idEfector";
				colvarIdEfector.DataType = DbType.Int32;
				colvarIdEfector.MaxLength = 0;
				colvarIdEfector.AutoIncrement = false;
				colvarIdEfector.IsNullable = false;
				colvarIdEfector.IsPrimaryKey = false;
				colvarIdEfector.IsForeignKey = false;
				colvarIdEfector.IsReadOnly = false;
				colvarIdEfector.DefaultSetting = @"";
				colvarIdEfector.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdEfector);
				
				TableSchema.TableColumn colvarIdEfectorDepositoZona = new TableSchema.TableColumn(schema);
				colvarIdEfectorDepositoZona.ColumnName = "idEfectorDepositoZona";
				colvarIdEfectorDepositoZona.DataType = DbType.Int32;
				colvarIdEfectorDepositoZona.MaxLength = 0;
				colvarIdEfectorDepositoZona.AutoIncrement = false;
				colvarIdEfectorDepositoZona.IsNullable = false;
				colvarIdEfectorDepositoZona.IsPrimaryKey = false;
				colvarIdEfectorDepositoZona.IsForeignKey = false;
				colvarIdEfectorDepositoZona.IsReadOnly = false;
				colvarIdEfectorDepositoZona.DefaultSetting = @"";
				colvarIdEfectorDepositoZona.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdEfectorDepositoZona);
				
				TableSchema.TableColumn colvarIpDepositoZona = new TableSchema.TableColumn(schema);
				colvarIpDepositoZona.ColumnName = "ipDepositoZona";
				colvarIpDepositoZona.DataType = DbType.AnsiString;
				colvarIpDepositoZona.MaxLength = 15;
				colvarIpDepositoZona.AutoIncrement = false;
				colvarIpDepositoZona.IsNullable = false;
				colvarIpDepositoZona.IsPrimaryKey = false;
				colvarIpDepositoZona.IsForeignKey = false;
				colvarIpDepositoZona.IsReadOnly = false;
				colvarIpDepositoZona.DefaultSetting = @"";
				colvarIpDepositoZona.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIpDepositoZona);
				
				TableSchema.TableColumn colvarUrlDepositoZona = new TableSchema.TableColumn(schema);
				colvarUrlDepositoZona.ColumnName = "urlDepositoZona";
				colvarUrlDepositoZona.DataType = DbType.AnsiString;
				colvarUrlDepositoZona.MaxLength = 100;
				colvarUrlDepositoZona.AutoIncrement = false;
				colvarUrlDepositoZona.IsNullable = true;
				colvarUrlDepositoZona.IsPrimaryKey = false;
				colvarUrlDepositoZona.IsForeignKey = false;
				colvarUrlDepositoZona.IsReadOnly = false;
				colvarUrlDepositoZona.DefaultSetting = @"";
				colvarUrlDepositoZona.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUrlDepositoZona);
				
				TableSchema.TableColumn colvarIdEfectorSistemaIntegrado = new TableSchema.TableColumn(schema);
				colvarIdEfectorSistemaIntegrado.ColumnName = "idEfectorSistemaIntegrado";
				colvarIdEfectorSistemaIntegrado.DataType = DbType.Int32;
				colvarIdEfectorSistemaIntegrado.MaxLength = 0;
				colvarIdEfectorSistemaIntegrado.AutoIncrement = false;
				colvarIdEfectorSistemaIntegrado.IsNullable = true;
				colvarIdEfectorSistemaIntegrado.IsPrimaryKey = false;
				colvarIdEfectorSistemaIntegrado.IsForeignKey = false;
				colvarIdEfectorSistemaIntegrado.IsReadOnly = false;
				colvarIdEfectorSistemaIntegrado.DefaultSetting = @"";
				colvarIdEfectorSistemaIntegrado.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdEfectorSistemaIntegrado);
				
				TableSchema.TableColumn colvarNombre = new TableSchema.TableColumn(schema);
				colvarNombre.ColumnName = "nombre";
				colvarNombre.DataType = DbType.AnsiString;
				colvarNombre.MaxLength = 50;
				colvarNombre.AutoIncrement = false;
				colvarNombre.IsNullable = true;
				colvarNombre.IsPrimaryKey = false;
				colvarNombre.IsForeignKey = false;
				colvarNombre.IsReadOnly = false;
				colvarNombre.DefaultSetting = @"";
				colvarNombre.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNombre);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["insProvider"].AddSchema("INS_DepositoZona",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdDepositoZona")]
		[Bindable(true)]
		public int IdDepositoZona 
		{
			get { return GetColumnValue<int>(Columns.IdDepositoZona); }
			set { SetColumnValue(Columns.IdDepositoZona, value); }
		}
		  
		[XmlAttribute("IdEfector")]
		[Bindable(true)]
		public int IdEfector 
		{
			get { return GetColumnValue<int>(Columns.IdEfector); }
			set { SetColumnValue(Columns.IdEfector, value); }
		}
		  
		[XmlAttribute("IdEfectorDepositoZona")]
		[Bindable(true)]
		public int IdEfectorDepositoZona 
		{
			get { return GetColumnValue<int>(Columns.IdEfectorDepositoZona); }
			set { SetColumnValue(Columns.IdEfectorDepositoZona, value); }
		}
		  
		[XmlAttribute("IpDepositoZona")]
		[Bindable(true)]
		public string IpDepositoZona 
		{
			get { return GetColumnValue<string>(Columns.IpDepositoZona); }
			set { SetColumnValue(Columns.IpDepositoZona, value); }
		}
		  
		[XmlAttribute("UrlDepositoZona")]
		[Bindable(true)]
		public string UrlDepositoZona 
		{
			get { return GetColumnValue<string>(Columns.UrlDepositoZona); }
			set { SetColumnValue(Columns.UrlDepositoZona, value); }
		}
		  
		[XmlAttribute("IdEfectorSistemaIntegrado")]
		[Bindable(true)]
		public int? IdEfectorSistemaIntegrado 
		{
			get { return GetColumnValue<int?>(Columns.IdEfectorSistemaIntegrado); }
			set { SetColumnValue(Columns.IdEfectorSistemaIntegrado, value); }
		}
		  
		[XmlAttribute("Nombre")]
		[Bindable(true)]
		public string Nombre 
		{
			get { return GetColumnValue<string>(Columns.Nombre); }
			set { SetColumnValue(Columns.Nombre, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varIdDepositoZona,int varIdEfector,int varIdEfectorDepositoZona,string varIpDepositoZona,string varUrlDepositoZona,int? varIdEfectorSistemaIntegrado,string varNombre)
		{
			InsDepositoZona item = new InsDepositoZona();
			
			item.IdDepositoZona = varIdDepositoZona;
			
			item.IdEfector = varIdEfector;
			
			item.IdEfectorDepositoZona = varIdEfectorDepositoZona;
			
			item.IpDepositoZona = varIpDepositoZona;
			
			item.UrlDepositoZona = varUrlDepositoZona;
			
			item.IdEfectorSistemaIntegrado = varIdEfectorSistemaIntegrado;
			
			item.Nombre = varNombre;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varIdDepositoZona,int varIdEfector,int varIdEfectorDepositoZona,string varIpDepositoZona,string varUrlDepositoZona,int? varIdEfectorSistemaIntegrado,string varNombre)
		{
			InsDepositoZona item = new InsDepositoZona();
			
				item.IdDepositoZona = varIdDepositoZona;
			
				item.IdEfector = varIdEfector;
			
				item.IdEfectorDepositoZona = varIdEfectorDepositoZona;
			
				item.IpDepositoZona = varIpDepositoZona;
			
				item.UrlDepositoZona = varUrlDepositoZona;
			
				item.IdEfectorSistemaIntegrado = varIdEfectorSistemaIntegrado;
			
				item.Nombre = varNombre;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdDepositoZonaColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn IdEfectorColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn IdEfectorDepositoZonaColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn IpDepositoZonaColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn UrlDepositoZonaColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn IdEfectorSistemaIntegradoColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn NombreColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdDepositoZona = @"idDepositoZona";
			 public static string IdEfector = @"idEfector";
			 public static string IdEfectorDepositoZona = @"idEfectorDepositoZona";
			 public static string IpDepositoZona = @"ipDepositoZona";
			 public static string UrlDepositoZona = @"urlDepositoZona";
			 public static string IdEfectorSistemaIntegrado = @"idEfectorSistemaIntegrado";
			 public static string Nombre = @"nombre";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
