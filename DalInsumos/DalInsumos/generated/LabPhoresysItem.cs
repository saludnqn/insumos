using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace DalInsumos
{
	/// <summary>
	/// Strongly-typed collection for the LabPhoresysItem class.
	/// </summary>
    [Serializable]
	public partial class LabPhoresysItemCollection : ActiveList<LabPhoresysItem, LabPhoresysItemCollection>
	{	   
		public LabPhoresysItemCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LabPhoresysItemCollection</returns>
		public LabPhoresysItemCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LabPhoresysItem o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the LAB_PhoresysItem table.
	/// </summary>
	[Serializable]
	public partial class LabPhoresysItem : ActiveRecord<LabPhoresysItem>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LabPhoresysItem()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LabPhoresysItem(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LabPhoresysItem(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LabPhoresysItem(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("LAB_PhoresysItem", TableType.Table, DataService.GetInstance("insProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdPhoresysItem = new TableSchema.TableColumn(schema);
				colvarIdPhoresysItem.ColumnName = "idPhoresysItem";
				colvarIdPhoresysItem.DataType = DbType.Int32;
				colvarIdPhoresysItem.MaxLength = 0;
				colvarIdPhoresysItem.AutoIncrement = true;
				colvarIdPhoresysItem.IsNullable = false;
				colvarIdPhoresysItem.IsPrimaryKey = true;
				colvarIdPhoresysItem.IsForeignKey = false;
				colvarIdPhoresysItem.IsReadOnly = false;
				colvarIdPhoresysItem.DefaultSetting = @"";
				colvarIdPhoresysItem.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdPhoresysItem);
				
				TableSchema.TableColumn colvarIdPhoresys = new TableSchema.TableColumn(schema);
				colvarIdPhoresys.ColumnName = "idPhoresys";
				colvarIdPhoresys.DataType = DbType.AnsiString;
				colvarIdPhoresys.MaxLength = 50;
				colvarIdPhoresys.AutoIncrement = false;
				colvarIdPhoresys.IsNullable = false;
				colvarIdPhoresys.IsPrimaryKey = false;
				colvarIdPhoresys.IsForeignKey = false;
				colvarIdPhoresys.IsReadOnly = false;
				colvarIdPhoresys.DefaultSetting = @"";
				colvarIdPhoresys.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdPhoresys);
				
				TableSchema.TableColumn colvarIdItem = new TableSchema.TableColumn(schema);
				colvarIdItem.ColumnName = "idItem";
				colvarIdItem.DataType = DbType.Int32;
				colvarIdItem.MaxLength = 0;
				colvarIdItem.AutoIncrement = false;
				colvarIdItem.IsNullable = false;
				colvarIdItem.IsPrimaryKey = false;
				colvarIdItem.IsForeignKey = false;
				colvarIdItem.IsReadOnly = false;
				colvarIdItem.DefaultSetting = @"";
				colvarIdItem.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdItem);
				
				TableSchema.TableColumn colvarHabilitado = new TableSchema.TableColumn(schema);
				colvarHabilitado.ColumnName = "habilitado";
				colvarHabilitado.DataType = DbType.Boolean;
				colvarHabilitado.MaxLength = 0;
				colvarHabilitado.AutoIncrement = false;
				colvarHabilitado.IsNullable = false;
				colvarHabilitado.IsPrimaryKey = false;
				colvarHabilitado.IsForeignKey = false;
				colvarHabilitado.IsReadOnly = false;
				colvarHabilitado.DefaultSetting = @"";
				colvarHabilitado.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHabilitado);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["insProvider"].AddSchema("LAB_PhoresysItem",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdPhoresysItem")]
		[Bindable(true)]
		public int IdPhoresysItem 
		{
			get { return GetColumnValue<int>(Columns.IdPhoresysItem); }
			set { SetColumnValue(Columns.IdPhoresysItem, value); }
		}
		  
		[XmlAttribute("IdPhoresys")]
		[Bindable(true)]
		public string IdPhoresys 
		{
			get { return GetColumnValue<string>(Columns.IdPhoresys); }
			set { SetColumnValue(Columns.IdPhoresys, value); }
		}
		  
		[XmlAttribute("IdItem")]
		[Bindable(true)]
		public int IdItem 
		{
			get { return GetColumnValue<int>(Columns.IdItem); }
			set { SetColumnValue(Columns.IdItem, value); }
		}
		  
		[XmlAttribute("Habilitado")]
		[Bindable(true)]
		public bool Habilitado 
		{
			get { return GetColumnValue<bool>(Columns.Habilitado); }
			set { SetColumnValue(Columns.Habilitado, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varIdPhoresys,int varIdItem,bool varHabilitado)
		{
			LabPhoresysItem item = new LabPhoresysItem();
			
			item.IdPhoresys = varIdPhoresys;
			
			item.IdItem = varIdItem;
			
			item.Habilitado = varHabilitado;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varIdPhoresysItem,string varIdPhoresys,int varIdItem,bool varHabilitado)
		{
			LabPhoresysItem item = new LabPhoresysItem();
			
				item.IdPhoresysItem = varIdPhoresysItem;
			
				item.IdPhoresys = varIdPhoresys;
			
				item.IdItem = varIdItem;
			
				item.Habilitado = varHabilitado;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdPhoresysItemColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn IdPhoresysColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn IdItemColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn HabilitadoColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdPhoresysItem = @"idPhoresysItem";
			 public static string IdPhoresys = @"idPhoresys";
			 public static string IdItem = @"idItem";
			 public static string Habilitado = @"habilitado";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
